<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lionel Henry, Jenny Bryan, Hadley Wickham, Greg | nutriverse</title>
    <link>/author/lionel-henry-jenny-bryan-hadley-wickham-greg/</link>
      <atom:link href="/author/lionel-henry-jenny-bryan-hadley-wickham-greg/index.xml" rel="self" type="application/rss+xml" />
    <description>Lionel Henry, Jenny Bryan, Hadley Wickham, Greg</description>
    <generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Wed, 06 Feb 2019 00:00:00 +0000</lastBuildDate>
    <item>
      <title>purrr 0.3.0</title>
      <link>/blog/2019/02/purrr-0-3-0/</link>
      <pubDate>Wed, 06 Feb 2019 00:00:00 +0000</pubDate>
      <guid>/blog/2019/02/purrr-0-3-0/</guid>
      <description>&lt;p&gt;We&amp;rsquo;re excited to announce the release of 
&lt;a href=&#34;https://purrr.tidyverse.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;purrr&lt;/a&gt; 0.3.0! purrr enhances Râ€™s functional programming toolkit by providing a complete and consistent set of tools for working with functions and vectors.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Install the latest version with:&lt;/span&gt;
&lt;span style=&#34;color:#00f&#34;&gt;install.packages&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;purrr&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Start working with purrr:&lt;/span&gt;
&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(purrr)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this release, &lt;code&gt;pluck()&lt;/code&gt; gets a few new variants:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pluck&amp;lt;-&lt;/code&gt;, &lt;code&gt;assign_in()&lt;/code&gt; and &lt;code&gt;modify_in()&lt;/code&gt; allow deep modifications of nested structures.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;chuck()&lt;/code&gt; is a stricter variant of &lt;code&gt;pluck()&lt;/code&gt; that consistently fails instead of returning &lt;code&gt;NULL&lt;/code&gt; when the structure does not have the expected shape.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A new set of tools helps limiting the rate at which a function is called:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;slowly()&lt;/code&gt; forces a function to sleep between each invokation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;insistently()&lt;/code&gt; automatically invokes a function again on error until it succeeds, and sleeps between invokations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;rate_delay()&lt;/code&gt; and &lt;code&gt;rate_backoff()&lt;/code&gt; helpers control the invokation rate of &lt;code&gt;slowly()&lt;/code&gt; and &lt;code&gt;insistently()&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The reduce and map functions gain a few improvements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;map_if()&lt;/code&gt; accepts an optional function with the &lt;code&gt;.else&lt;/code&gt; parameter. This function is applied on elements for which the predicate is &lt;code&gt;FALSE&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;map_at()&lt;/code&gt; now accepts &lt;code&gt;vars()&lt;/code&gt; selections. This lets you use selection helpers like &lt;code&gt;dplyr::starts_with()&lt;/code&gt; to determine the elements of a list which should be mapped.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;reduce()&lt;/code&gt; now supports early termination of a computation. Just return a value wrapped in a &lt;code&gt;done()&lt;/code&gt; to signal to &lt;code&gt;reduce()&lt;/code&gt; that you&amp;rsquo;re done.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Besides these new functions and tools, purrr 0.3.0 is mostly a polishing release. We have improved the consistency of behaviour:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;modify()&lt;/code&gt; is now a wrapper around &lt;code&gt;[[&amp;lt;-&lt;/code&gt; instead of &lt;code&gt;[&amp;lt;-&lt;/code&gt;. This makes it compatible with a larger variety of S3 vector classes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Predicate functions (such that you would pass to &lt;code&gt;map_if()&lt;/code&gt;) now must return a single &lt;code&gt;TRUE&lt;/code&gt; or &lt;code&gt;FALSE&lt;/code&gt;. Missing values and integers are no longer valid predicate outputs.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, we improved the consistency of the interface:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The direction of iteration/application is now consistently specified with a &lt;code&gt;.dir&lt;/code&gt; argument.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Many missing functions were added to fill the gaps: &lt;code&gt;accumulate2()&lt;/code&gt;, &lt;code&gt;imodify()&lt;/code&gt;, &lt;code&gt;map_depth()&lt;/code&gt;, &amp;hellip;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;partial()&lt;/code&gt; has a much improved and more flexible interface.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Find a detailed account of the changes in the 
&lt;a href=&#34;https://github.com/tidyverse/purrr/blob/master/NEWS.md#purrr-030&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NEWS&lt;/a&gt; file.&lt;/p&gt;
&lt;h2 id=&#34;new-pluck-variants&#34;&gt;New pluck variants&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;pluck()&lt;/code&gt; implements a generalised form of &lt;code&gt;[[&lt;/code&gt; that allow you to index deeply and flexibly into data structures. For instance, &lt;code&gt;pluck(x, &amp;quot;foo&amp;quot;, 2)&lt;/code&gt; is equivalent to &lt;code&gt;x[[&amp;quot;foo&amp;quot;]][[2]]&lt;/code&gt;. You can also supply a default value in case the element does not exist. For instance, &lt;code&gt;pluck(x, &amp;quot;foo&amp;quot;, 2, .default = NA)&lt;/code&gt; is equivalent to &lt;code&gt;x[[&amp;quot;foo&amp;quot;]][[2]]&lt;/code&gt;, returning an &lt;code&gt;NA&lt;/code&gt; if that element doesn&amp;rsquo;t exist. purrr 0.3.0 introduces variants of &lt;code&gt;pluck()&lt;/code&gt; to make it easier to work with deep data structures.&lt;/p&gt;
&lt;h3 id=&#34;pluck-assignment&#34;&gt;Pluck assignment&lt;/h3&gt;
&lt;p&gt;This release introduces the new functions &lt;code&gt;pluck&amp;lt;-&lt;/code&gt;, &lt;code&gt;assign_in()&lt;/code&gt; and &lt;code&gt;modify_in()&lt;/code&gt; as assignment variants of &lt;code&gt;pluck()&lt;/code&gt;. To illustrate deep assignment, let&amp;rsquo;s create a nested data structure:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;x &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;list&lt;/span&gt;(foo &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;list&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;), bar &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;list&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;))
&lt;span style=&#34;color:#00f&#34;&gt;str&lt;/span&gt;(x)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; List of 2&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  $ foo:List of 2&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   ..$ : num 1&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   ..$ : num 2&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  $ bar:List of 2&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   ..$ : num 3&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   ..$ : num 4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This sort of repeated structure is the kind of data where &lt;code&gt;pluck()&lt;/code&gt; shines:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;pluck&lt;/span&gt;(x, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 2&lt;/span&gt;

&lt;span style=&#34;color:#00f&#34;&gt;pluck&lt;/span&gt;(x, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can now use the same syntax to modify the data:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;pluck&lt;/span&gt;(x, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;100&lt;/span&gt;
&lt;span style=&#34;color:#00f&#34;&gt;str&lt;/span&gt;(x)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; List of 2&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  $ foo:List of 2&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   ..$ : num 1&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   ..$ : num 100&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  $ bar:List of 2&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   ..$ : num 3&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   ..$ : num 4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;pluck&amp;lt;-&lt;/code&gt; also has a functional form that does not modify objects in your environment, but instead returns a modified copy:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;out &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;assign_in&lt;/span&gt;(x, &lt;span style=&#34;color:#00f&#34;&gt;list&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;), &lt;span style=&#34;color:#666&#34;&gt;2000&lt;/span&gt;)

&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# The object is still the same as before&lt;/span&gt;
&lt;span style=&#34;color:#00f&#34;&gt;str&lt;/span&gt;(x)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; List of 2&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  $ foo:List of 2&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   ..$ : num 1&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   ..$ : num 100&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  $ bar:List of 2&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   ..$ : num 3&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   ..$ : num 4&lt;/span&gt;

&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# The modified data is in `out`&lt;/span&gt;
&lt;span style=&#34;color:#00f&#34;&gt;str&lt;/span&gt;(out)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; List of 2&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  $ foo:List of 2&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   ..$ : num 1&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   ..$ : num 2000&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  $ bar:List of 2&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   ..$ : num 3&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   ..$ : num 4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, &lt;code&gt;modify_in()&lt;/code&gt; is a variant of &lt;code&gt;modify()&lt;/code&gt; that only changes the pluck location with the result of applying a function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;out &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;modify_in&lt;/span&gt;(x, &lt;span style=&#34;color:#00f&#34;&gt;list&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;), as.character)
&lt;span style=&#34;color:#00f&#34;&gt;str&lt;/span&gt;(out)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; List of 2&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  $ foo:List of 2&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   ..$ : num 1&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   ..$ : chr &amp;#34;100&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  $ bar:List of 2&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   ..$ : num 3&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   ..$ : num 4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;stricter-pluck&#34;&gt;Stricter pluck()&lt;/h3&gt;
&lt;p&gt;Thanks to Daniel Barnett (@daniel-barnett on Github), &lt;code&gt;pluck()&lt;/code&gt; now has a stricter cousin &lt;code&gt;chuck()&lt;/code&gt;. Whereas &lt;code&gt;pluck()&lt;/code&gt; is very permissive regarding non-existing locations and returns &lt;code&gt;NULL&lt;/code&gt; in these cases, and &lt;code&gt;[[&lt;/code&gt; inconsistently returns &lt;code&gt;NULL&lt;/code&gt;, &lt;code&gt;NA&lt;/code&gt;, or throws an error, &lt;code&gt;chuck()&lt;/code&gt; fails consistently with informative messages (i.e., it &amp;ldquo;chucks&amp;rdquo; an error message):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;pluck&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;list&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;), &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; NULL&lt;/span&gt;

&lt;span style=&#34;color:#00f&#34;&gt;chuck&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;list&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;), &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Error: Index 1 is attempting to pluck from an unnamed vector using a string name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;rates&#34;&gt;Rates&lt;/h2&gt;
&lt;p&gt;Thanks to Richie Cotton (@richierocks) and Ian Lyttle (@ijlyttle), purrr gains a function operator to make a function call itself repeatedly when an error occurs.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;counter &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;

f &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;...&lt;/span&gt;) {
  &lt;span style=&#34;color:#00f&#34;&gt;if &lt;/span&gt;(counter &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;) {
    counter &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&amp;lt;-&lt;/span&gt; counter &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#00f&#34;&gt;stop&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;tilt!&amp;#34;&lt;/span&gt;)
  }
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;result&amp;#34;&lt;/span&gt;
}

&lt;span style=&#34;color:#00f&#34;&gt;f&lt;/span&gt;()
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Error in f(): tilt!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If the function is wrapped with &lt;code&gt;insistently()&lt;/code&gt;, it will try a few times before giving up:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Reset counter&lt;/span&gt;
counter &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;

f2 &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;insistently&lt;/span&gt;(f)
&lt;span style=&#34;color:#00f&#34;&gt;f2&lt;/span&gt;()
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] &amp;#34;result&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Another rate limiting function is &lt;code&gt;slowly()&lt;/code&gt;. While &lt;code&gt;insistently()&lt;/code&gt; loops by itself, &lt;code&gt;slowly()&lt;/code&gt; is designed to be used in your own loops, for instance in a map iteration:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;f &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;...&lt;/span&gt;) &lt;span style=&#34;color:#00f&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;Sys.time&lt;/span&gt;())

&lt;span style=&#34;color:#00f&#34;&gt;walk&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;, f)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] &amp;#34;2019-03-06 12:50:03 PST&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] &amp;#34;2019-03-06 12:50:03 PST&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] &amp;#34;2019-03-06 12:50:03 PST&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#00f&#34;&gt;walk&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#00f&#34;&gt;slowly&lt;/span&gt;(f))
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] &amp;#34;2019-03-06 12:50:03 PST&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] &amp;#34;2019-03-06 12:50:04 PST&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] &amp;#34;2019-03-06 12:50:05 PST&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;slowly()&lt;/code&gt; uses a constant rate by default while &lt;code&gt;insistently()&lt;/code&gt; uses a backoff rate. The rate limiting can be configured with optional jitter via &lt;code&gt;rate_backoff()&lt;/code&gt; and &lt;code&gt;rate_delay()&lt;/code&gt;, which implement exponential backoff rate and constant rate respectively.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;walk&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#00f&#34;&gt;slowly&lt;/span&gt;(f, &lt;span style=&#34;color:#00f&#34;&gt;rate_backoff&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;, max_times &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;Inf&lt;/span&gt;)))
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] &amp;#34;2019-03-06 12:50:05 PST&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] &amp;#34;2019-03-06 12:50:07 PST&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] &amp;#34;2019-03-06 12:50:10 PST&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;map-and-reduce-improvements&#34;&gt;Map and reduce improvements&lt;/h2&gt;
&lt;h3 id=&#34;map_if-or-else&#34;&gt;&lt;code&gt;map_if()&lt;/code&gt;&amp;hellip; or else?&lt;/h3&gt;
&lt;p&gt;If you like using &lt;code&gt;map_if()&lt;/code&gt;, perhaps you&amp;rsquo;ll find the new &lt;code&gt;.else&lt;/code&gt; argument useful. &lt;code&gt;.else&lt;/code&gt; is a function applied to elements for which the predicate is &lt;code&gt;FALSE&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;map_if&lt;/span&gt;(iris, is.numeric, mean, .else &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; nlevels)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $Sepal.Length&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 5.843333&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $Sepal.Width&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 3.057333&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $Petal.Length&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 3.758&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $Petal.Width&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 1.199333&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $Species&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;new-map_at-features&#34;&gt;New &lt;code&gt;map_at()&lt;/code&gt; features&lt;/h3&gt;
&lt;p&gt;Colin Fay (@ColinFay) has added support for tidyselect expressions to &lt;code&gt;map_at()&lt;/code&gt; and other &lt;code&gt;_at&lt;/code&gt; mappers. This brings the interface of these functions closer to scoped functions from the dplyr package, such as &lt;code&gt;dplyr::mutate_at()&lt;/code&gt;. Note that &lt;code&gt;vars()&lt;/code&gt; is currently not reexported from purrr, so you need to use &lt;code&gt;dplyr::vars()&lt;/code&gt; or &lt;code&gt;ggplot2::vars()&lt;/code&gt; for the time being.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;suppressMessages&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;dplyr&amp;#34;&lt;/span&gt;))

x &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;list&lt;/span&gt;(
  foo &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;,
  bar &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;,
  baz &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;11&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;15&lt;/span&gt;
)

&lt;span style=&#34;color:#00f&#34;&gt;map_at&lt;/span&gt;(x, &lt;span style=&#34;color:#00f&#34;&gt;vars&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;starts_with&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;)), mean)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $foo&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 1 2 3 4 5&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $bar&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 8&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $baz&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 13&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;map_at()&lt;/code&gt; now also supports negative selections:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;map_at&lt;/span&gt;(x, &lt;span style=&#34;color:#666&#34;&gt;-2&lt;/span&gt;, `*`, &lt;span style=&#34;color:#666&#34;&gt;1000&lt;/span&gt;)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $foo&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 1000 2000 3000 4000 5000&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $bar&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1]  6  7  8  9 10&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $baz&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 11000 12000 13000 14000 15000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;early-termination-of-reduction&#34;&gt;Early termination of reduction&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;reduce()&lt;/code&gt; is an operation that combines the elements of a vector into a single value by calling a binary function repeatedly with the result so far and the next input of a vector. &lt;code&gt;reduce()&lt;/code&gt; and its variant &lt;code&gt;accumulate()&lt;/code&gt; now support early termination of the reduction. To halt the computation, just return the last value wrapped in a &lt;code&gt;done()&lt;/code&gt; box:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# This computes the total sum of the input vector&lt;/span&gt;
&lt;span style=&#34;color:#00f&#34;&gt;reduce&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; .x &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; .y)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 5050&lt;/span&gt;

&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# This stops as soon as the sum is greater than 50&lt;/span&gt;
&lt;span style=&#34;color:#00f&#34;&gt;reduce&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;if &lt;/span&gt;(.x &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;50&lt;/span&gt;) &lt;span style=&#34;color:#00f&#34;&gt;done&lt;/span&gt;(.x) else .x &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; .y)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 55&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This feature takes inspiration from the 
&lt;a href=&#34;https://clojuredocs.org/clojure.core/reduced&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Clojure&lt;/a&gt; language.&lt;/p&gt;
&lt;h2 id=&#34;consistency&#34;&gt;Consistency&lt;/h2&gt;
&lt;p&gt;In this polishing release, a lot of effort went towards consistency of behaviour and of the interface.&lt;/p&gt;
&lt;h3 id=&#34;behaviour&#34;&gt;Behaviour&lt;/h3&gt;
&lt;h4 id=&#34;better-support-for-s3-vectors&#34;&gt;Better support for S3 vectors&lt;/h4&gt;
&lt;p&gt;We are working hard on improving support for S3 vectors in the tidyverse. As of this release, &lt;code&gt;modify()&lt;/code&gt; is now a wrapper around &lt;code&gt;[[&amp;lt;-&lt;/code&gt; instead of &lt;code&gt;[&amp;lt;-&lt;/code&gt;. This should make it directly compatible with a larger set of vector classes. Thanks to the work of Mikko Marttila (@mikmart), &lt;code&gt;pmap()&lt;/code&gt; and &lt;code&gt;pwalk()&lt;/code&gt; also do a better job of preserving S3 classes. Finally, &lt;code&gt;pluck()&lt;/code&gt; now properly calls the &lt;code&gt;[[&lt;/code&gt; methods of S3 objects.&lt;/p&gt;
&lt;p&gt;In the next version of purrr, we plan to use the in-development vctrs package to provide more principled and predictable vector operations. This should help us preserve the class and properties of S3 vectors like factors, dates, or your custom classes.&lt;/p&gt;
&lt;h4 id=&#34;stricter-predicate-checking&#34;&gt;Stricter predicate checking&lt;/h4&gt;
&lt;p&gt;purrr now checks the results of your predicate functions, which must now consistently return &lt;code&gt;TRUE&lt;/code&gt; or &lt;code&gt;FALSE&lt;/code&gt;. We no longer offer support for &lt;code&gt;NA&lt;/code&gt; or for boolish numeric values (R normally interprets 0 as &lt;code&gt;FALSE&lt;/code&gt; and all other values as &lt;code&gt;TRUE&lt;/code&gt;). The purpose of this change is to detect errors earlier with a more relevant error message.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;keep&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;NA&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;), &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; . &lt;span style=&#34;color:#666&#34;&gt;%%&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Error: Predicate functions must return a single `TRUE` or `FALSE`, not a missing value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;interface&#34;&gt;Interface&lt;/h3&gt;
&lt;h4 id=&#34;direction-of-application&#34;&gt;Direction of application&lt;/h4&gt;
&lt;p&gt;The direction of application is now specified the same way across purrr functions. &lt;code&gt;reduce()&lt;/code&gt;, &lt;code&gt;compose()&lt;/code&gt; and &lt;code&gt;detect()&lt;/code&gt; now have a &lt;code&gt;.dir&lt;/code&gt; parameter that can take the value &lt;code&gt;&amp;quot;forward&amp;quot;&lt;/code&gt; or &lt;code&gt;&amp;quot;backward&amp;quot;&lt;/code&gt;. This terminology should be less ambiguous than &amp;ldquo;left&amp;rdquo; and &amp;ldquo;right&amp;rdquo;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;reduce&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;, `-`, .dir &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;backward&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#00f&#34;&gt;compose&lt;/span&gt;(foo, bar, .dir &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;forward&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#00f&#34;&gt;detect&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; . &lt;span style=&#34;color:#666&#34;&gt;%%&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, .dir &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;backward&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that the backward version of &lt;code&gt;reduce()&lt;/code&gt; (called right-reduce in the literature) applies the reduced function in a slightly different way than &lt;code&gt;reduce_right()&lt;/code&gt;. The new algorithm is more consistent with how this operation is usually defined in other languages.&lt;/p&gt;
&lt;p&gt;Following the introduction of the &lt;code&gt;.dir&lt;/code&gt; parameters, the &lt;code&gt;_right&lt;/code&gt; variants such as &lt;code&gt;reduce_right()&lt;/code&gt; have been soft-deprecated, as well as the &lt;code&gt;.right&lt;/code&gt; parameter of &lt;code&gt;detect()&lt;/code&gt; and &lt;code&gt;detect_index()&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;partial&#34;&gt;partial()&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;partial()&lt;/code&gt; has been rewritten to be a simple wrapper around &lt;code&gt;call_modify()&lt;/code&gt; and &lt;code&gt;eval_tidy()&lt;/code&gt; from the rlang package. Consequently, the &lt;code&gt;.env&lt;/code&gt;, &lt;code&gt;.lazy&lt;/code&gt; and &lt;code&gt;.first&lt;/code&gt; arguments are soft-deprecated and replaced by a flexible syntax.&lt;/p&gt;
&lt;p&gt;To control the timing of evaluation, unquote the partialised arguments that should be evaluated only once when the function is created. The non-unquoted arguments are evaluated at each invokation of the function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;my_list &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;partial&lt;/span&gt;(list, lazy &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;rnorm&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;), eager &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;!!&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;rnorm&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;))

&lt;span style=&#34;color:#00f&#34;&gt;my_list&lt;/span&gt;()
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $lazy&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1]  0.2945451  0.3897943 -1.2080762&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $eager&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] -0.1842525 -1.3713305 -0.5991677&lt;/span&gt;

&lt;span style=&#34;color:#00f&#34;&gt;my_list&lt;/span&gt;()
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $lazy&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] -0.3636760 -1.6266727 -0.2564784&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $eager&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] -0.1842525 -1.3713305 -0.5991677&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can also control the position of the future arguments by passing an empty &lt;code&gt;... = &lt;/code&gt; parameter. This syntax is powered by &lt;code&gt;rlang::call_modify()&lt;/code&gt; and allows you to add or move dots in a quoted function call. In the case of &lt;code&gt;partial()&lt;/code&gt;, the dots represent the future arguments. We use this syntax in the following snippet to position the future arguments right between two partialised arguments:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;my_list &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;partial&lt;/span&gt;(list, &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; , &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;)

&lt;span style=&#34;color:#00f&#34;&gt;my_list&lt;/span&gt;()
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [[1]]&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 1&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [[2]]&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 2&lt;/span&gt;

&lt;span style=&#34;color:#00f&#34;&gt;my_list&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [[1]]&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 1&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [[2]]&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] &amp;#34;foo&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [[3]]&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;exec-replaces-invoke&#34;&gt;&lt;code&gt;exec()&lt;/code&gt; replaces &lt;code&gt;invoke()&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;We are retiring &lt;code&gt;invoke()&lt;/code&gt; and &lt;code&gt;invoke_map()&lt;/code&gt; in favour of &lt;code&gt;exec()&lt;/code&gt;. Retirement means that we&amp;rsquo;ll keep these functions indefinitely in the package, but we won&amp;rsquo;t add features or recommend using them.&lt;/p&gt;
&lt;p&gt;We are now favouring &lt;code&gt;exec()&lt;/code&gt;, which uses the tidy dots syntax for passing lists of arguments:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Before:&lt;/span&gt;
&lt;span style=&#34;color:#00f&#34;&gt;invoke&lt;/span&gt;(mean, &lt;span style=&#34;color:#00f&#34;&gt;list&lt;/span&gt;(na.rm &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;), x &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 5.5&lt;/span&gt;

&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# After&lt;/span&gt;
&lt;span style=&#34;color:#00f&#34;&gt;exec&lt;/span&gt;(mean, &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;!!!&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;list&lt;/span&gt;(na.rm &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;))
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 5.5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;filling-the-missing-parts&#34;&gt;Filling the missing parts&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;purrr 0.3.0 introduces &lt;code&gt;accumulate2()&lt;/code&gt;, &lt;code&gt;modify2()&lt;/code&gt; and &lt;code&gt;imodify()&lt;/code&gt; variants.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;By popular request, &lt;code&gt;at_depth()&lt;/code&gt; is back as &lt;code&gt;map_depth()&lt;/code&gt;. Unlike &lt;code&gt;modify_depth()&lt;/code&gt; which preserves the class structure of the input tree, this variant only returns trees made of lists of lists (up to the given depth), coercing vectors if needed.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;thanks&#34;&gt;Thanks!&lt;/h2&gt;
&lt;p&gt;Thanks to all the contributors for this release!&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/ArtemSokolov&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ï¼ ArtemSokolov&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/batpigandme&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ï¼ batpigandme&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/bbrewington&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ï¼ bbrewington&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/billdenney&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ï¼ billdenney&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/cderv&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ï¼ cderv&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/cfhammill&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ï¼ cfhammill&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/ColinFay&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ï¼ ColinFay&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/dan-reznik&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ï¼ dan-reznik&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/daniel-barnett&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ï¼ daniel-barnett&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/danilinares&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ï¼ danilinares&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/drtjc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ï¼ drtjc&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/egnha&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ï¼ egnha&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/Eluvias&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ï¼ Eluvias&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/flying-sheep&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ï¼ flying-sheep&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/gergness&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ï¼ gergness&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/gvwilson&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ï¼ gvwilson&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/hadley&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ï¼ hadley&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/hammer&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ï¼ hammer&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/ijlyttle&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ï¼ ijlyttle&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/ilarischeinin&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ï¼ ilarischeinin&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/IndrajeetPatil&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ï¼ IndrajeetPatil&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/ISPritchin&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ï¼ ISPritchin&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/jameslairdsmith&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ï¼ jameslairdsmith&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/jameslamb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ï¼ jameslamb&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/jrnold&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ï¼ jrnold&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/kcf-jackson&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ï¼ kcf-jackson&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/leungi&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ï¼ leungi&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/lionel-&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ï¼ lionel-&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/loladze&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ï¼ loladze&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/maxheld83&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ï¼ maxheld83&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/mikmart&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ï¼ mikmart&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/MilesMcBain&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ï¼ MilesMcBain&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/moodymudskipper&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ï¼ moodymudskipper&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/mrstlee&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ï¼ mrstlee&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/namelessjon&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ï¼ namelessjon&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/r-cheologist&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ï¼ r-cheologist&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/randomgambit&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ï¼ randomgambit&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/rmflight&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ï¼ rmflight&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/roumail&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ï¼ roumail&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/Ryo-N7&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ï¼ Ryo-N7&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/serina-robinson&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ï¼ serina-robinson&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/skaltman&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ï¼ skaltman&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/suraggupta&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ï¼ suraggupta&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/thays42&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ï¼ thays42&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/tyluRp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ï¼ tyluRp&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/tzakharko&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ï¼ tzakharko&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/VincentGuyader&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ï¼ VincentGuyader&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/wlandau&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ï¼ wlandau&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/wmayner&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ï¼ wmayner&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/yanxianl&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ï¼ yanxianl&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/yutannihilation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ï¼ yutannihilation&lt;/a&gt;, and 
&lt;a href=&#34;https://github.com/yysh12&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ï¼ yysh12&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
