<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>package | nutriverse</title>
    <link>/categories/package/</link>
      <atom:link href="/categories/package/index.xml" rel="self" type="application/rss+xml" />
    <description>package</description>
    <generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Thu, 25 Jun 2020 00:00:00 +0000</lastBuildDate>
    <item>
      <title>recipes 0.1.13</title>
      <link>/blog/2020/06/recipes-0-1-13/</link>
      <pubDate>Thu, 25 Jun 2020 00:00:00 +0000</pubDate>
      <guid>/blog/2020/06/recipes-0-1-13/</guid>
      <description>&lt;p&gt;We&amp;rsquo;re very chuffed to announce the release of 
&lt;a href=&#34;https://recipes.tidymodels.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;recipes&lt;/a&gt; 0.1.13. recipes is an alternative method for creating and preprocessing design matrices that can be used for modeling or visualization.&lt;/p&gt;
&lt;p&gt;You can install it from CRAN with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;install.packages&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;recipes&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can see a full list of changes in the 
&lt;a href=&#34;https://recipes.tidymodels.org/news/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;release notes&lt;/a&gt;. There are some improvements and changes to talk about.&lt;/p&gt;
&lt;h1 id=&#34;general-changes&#34;&gt;General changes&lt;/h1&gt;
&lt;p&gt;First, &lt;code&gt;step_filter()&lt;/code&gt;, &lt;code&gt;step_slice()&lt;/code&gt;, &lt;code&gt;step_sample()&lt;/code&gt;, and &lt;code&gt;step_naomit()&lt;/code&gt; had their defaults for &lt;code&gt;skip&lt;/code&gt; changed to &lt;code&gt;TRUE&lt;/code&gt;. In the vast majority of applications, these steps should not be applied to the test or assessment sets.&lt;/p&gt;
&lt;p&gt;Also, &lt;code&gt;step_upsample()&lt;/code&gt; and &lt;code&gt;step_downsample()&lt;/code&gt; are soft deprecated in recipes as they are now available in the 
&lt;a href=&#34;https://tidymodels.github.io/themis/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;themis package&lt;/a&gt;. They will be removed in the next version.&lt;/p&gt;
&lt;p&gt;Finally, for the new version of dplyr, the selectors &lt;code&gt;all_of()&lt;/code&gt; and &lt;code&gt;any_of()&lt;/code&gt; can now be used in step selections.&lt;/p&gt;
&lt;h1 id=&#34;feature-extraction-improvements&#34;&gt;Feature extraction improvements&lt;/h1&gt;
&lt;p&gt;In the 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Feature_extraction&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;feature extraction&lt;/em&gt;&lt;/a&gt; category, there are two improvements. First, the &lt;code&gt;tidy()&lt;/code&gt; method for &lt;code&gt;step_pca()&lt;/code&gt; can return the percentage of variation accounted for by each 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Principal_component_analysis&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PCA component&lt;/a&gt;. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(tidymodels)

&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Many highly correlated numeric predictors:&lt;/span&gt;
&lt;span style=&#34;color:#00f&#34;&gt;data&lt;/span&gt;(meats, package &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;modeldata&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#00f&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;2383&lt;/span&gt;)
split &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;initial_split&lt;/span&gt;(meats)
meat_tr &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;training&lt;/span&gt;(split)
meat_te &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;testing&lt;/span&gt;(split)

pca_rec &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
  &lt;span style=&#34;color:#00f&#34;&gt;recipe&lt;/span&gt;(water &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; fat &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; protein &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; ., data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; meat_tr) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#00f&#34;&gt;step_normalize&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;all_predictors&lt;/span&gt;()) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#00f&#34;&gt;step_pca&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;all_predictors&lt;/span&gt;(), num_comp &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;, id &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;pca&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#00f&#34;&gt;prep&lt;/span&gt;()

var_info &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;tidy&lt;/span&gt;(pca_rec, id &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;pca&amp;#34;&lt;/span&gt;, type &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;variance&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#00f&#34;&gt;table&lt;/span&gt;(var_info&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;terms)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## 
## cumulative percent variance         cumulative variance 
##                         100                         100 
##            percent variance                    variance 
##                         100                         100
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;var_info &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  dplyr&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;filter&lt;/span&gt;(terms &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;percent variance&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#00f&#34;&gt;ggplot&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; component, y &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; value)) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#00f&#34;&gt;geom_bar&lt;/span&gt;(stat &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;identity&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#00f&#34;&gt;xlim&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;)) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#00f&#34;&gt;ylab&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;% of Total Variation&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;figure/pca-tidy-1.svg&#34; alt=&#34;plot of chunk pca-tidy&#34;&gt;&lt;/p&gt;
&lt;p&gt;Another change in this version of recipes is that &lt;code&gt;step_pls()&lt;/code&gt; has received an upgrade. 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Partial_least_squares_regression&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Partial least squares&lt;/a&gt; (PLS) is similar to PCA but takes the outcome(s) into account.&lt;/p&gt;
&lt;p&gt;Previously, it used the 
&lt;a href=&#34;https://github.com/bhmevik/pls&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pls package&lt;/a&gt; to do the computations. That&amp;rsquo;s a great package but it lacks two important features: allow for a categorical outcome value (e.g. &amp;ldquo;pls-da&amp;rdquo; for &lt;em&gt;discriminant analysis&lt;/em&gt;) or allow for sparsity in the coefficients. Sparsity would facilitate simpler and perhaps more robust models.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;step_pls()&lt;/code&gt; now uses the Bioconductor 
&lt;a href=&#34;https://www.bioconductor.org/packages/release/bioc/html/mixOmics.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;mixOmics package&lt;/a&gt;. As such, the outcome data can now be a factor and a new argument &lt;code&gt;predictor_prop&lt;/code&gt; is used for sparsity. That argument specifies the maximum proportion of partial least squares loadings that will be &lt;em&gt;non-zero&lt;/em&gt; (per component) during training. Newly prepped recipes will use this package but previously created recipes still use the pls package.
For our previous example, let&amp;rsquo;s look at the protein outcome and build a recipe:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;pls_rec &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
  &lt;span style=&#34;color:#00f&#34;&gt;recipe&lt;/span&gt;(water &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; fat &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; protein &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; ., data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; meat_tr) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#00f&#34;&gt;step_normalize&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;all_predictors&lt;/span&gt;()) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#00f&#34;&gt;step_pls&lt;/span&gt;(
    &lt;span style=&#34;color:#00f&#34;&gt;all_predictors&lt;/span&gt;(),
    outcome &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;vars&lt;/span&gt;(protein),
    num_comp &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;,
    predictor_prop &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0.75&lt;/span&gt;,
    id &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;pls&amp;#34;&lt;/span&gt;
  ) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#00f&#34;&gt;prep&lt;/span&gt;()

&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# for new data: &lt;/span&gt;
&lt;span style=&#34;color:#00f&#34;&gt;bake&lt;/span&gt;(pls_rec, meat_te, protein, &lt;span style=&#34;color:#00f&#34;&gt;starts_with&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;PLS&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
  tidyr&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;pivot_longer&lt;/span&gt;(cols &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;protein),
                      names_to &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;component&amp;#34;&lt;/span&gt;,
                      values_to &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;values&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#00f&#34;&gt;ggplot&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; values, y &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; protein)) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#00f&#34;&gt;geom_point&lt;/span&gt;(alpha &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0.5&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#00f&#34;&gt;facet_wrap&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; component, scale &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;free_x&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;xlab&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;PLS Score&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;figure/pls-1.svg&#34; title=&#34;plot of chunk pls&#34; alt=&#34;plot of chunk pls&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;What are the PLS coefficients from this?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;tidy&lt;/span&gt;(pls_rec, id &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;pls&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;ggplot&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; component, y &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; terms, fill &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; value)) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;geom_tile&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;scale_fill_gradient2&lt;/span&gt;(
    low &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;#B2182B&amp;#34;&lt;/span&gt;,
    mid &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;white&amp;#34;&lt;/span&gt;,
    high &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;#2166AC&amp;#34;&lt;/span&gt;,
    limits &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;-0.4&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0.4&lt;/span&gt;)
  ) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#00f&#34;&gt;theme&lt;/span&gt;(axis.text.y &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;element_blank&lt;/span&gt;()) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#00f&#34;&gt;ylab&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Predictors&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;figure/pls-coef-1.svg&#34; title=&#34;plot of chunk pls-coef&#34; alt=&#34;plot of chunk pls-coef&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The third component has the largest coefficients and the largest effect on predicting the percentage of protein. This is consistent with the scatter plot above. The blocks of white in the heatmap above are coefficients effected by the sparsity argument.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>tidyr 1.1.0</title>
      <link>/blog/2020/05/tidyr-1.1.0/</link>
      <pubDate>Tue, 26 May 2020 00:00:00 +0000</pubDate>
      <guid>/blog/2020/05/tidyr-1.1.0/</guid>
      <description>&lt;p&gt;We&amp;rsquo;re delighted to announce that 
&lt;a href=&#34;http://tidyr.tidyverse.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tidyr&lt;/a&gt; 1.1.0 is now available from CRAN. tidyr provides a set of tools for transforming data frames to and from tidy data, where each variable is a column and each observation is a row. Tidy data is a convention for matching the semantics and structure of your data that makes using the rest of the tidyverse (and many other R packages) much easier.&lt;/p&gt;
&lt;p&gt;You can install install tidyr with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;install.packages&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;tidyr&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This release doesn&amp;rsquo;t include any major new excitement but it includes a whole passel of minor improvements building on the major changes in 
&lt;a href=&#34;https://www.tidyverse.org/blog/2019/09/tidyr-1-0-0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tidyr 1.0.0&lt;/a&gt;, and generally making everything easier to use and a bit more flexible. In this blog post, I&amp;rsquo;ll give a quick run down on new pivoting features; see the 
&lt;a href=&#34;https://github.com/tidyverse/tidyr/releases/tag/v1.1.0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;full release announcement&lt;/a&gt; for the details of other changes.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(tidyr)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;pivot_longer&#34;&gt;&lt;code&gt;pivot_longer()&lt;/code&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pivot_longer()&lt;/code&gt; gains a new &lt;code&gt;names_transform&lt;/code&gt; argument that allows you to
transform column names before they turn into data. For example, you can
use this new argument along with 
&lt;a href=&#34;https://readr.tidyverse.org/reference/parse_number.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;readr::parse_number()&lt;/code&gt;&lt;/a&gt; to
parse column names that really should be numbers:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;df &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;tibble&lt;/span&gt;(id &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, wk1 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, wk2 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;, wk3 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt;, wk4 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;25&lt;/span&gt;)
df &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;pivot_longer&lt;/span&gt;(
  cols &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;starts_with&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;wk&amp;#34;&lt;/span&gt;),
  names_to &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;week&amp;#34;&lt;/span&gt;,
  names_transform &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;list&lt;/span&gt;(week &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; readr&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;parse_number),
)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 4 x 3&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;      id  week value&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1     1     1     0&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2     1     2     4&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3     1     3     9&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4     1     4    25&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pivot_longer()&lt;/code&gt; can now discard uninformative column names by setting
&lt;code&gt;names_to = character()&lt;/code&gt;, thanks to idea and implementation from

&lt;a href=&#34;https://github.com/mitchelloharawild&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mitch O&amp;rsquo;Hara Wild&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;df &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;tibble&lt;/span&gt;(id &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;, fruitful_panda &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;, angry_aardvark &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt;)  
df &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;pivot_longer&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;id, names_to &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;character&lt;/span&gt;())
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 4 x 2&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;      id value&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1     1     3&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2     1     5&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3     2     4&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4     2     6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pivot_longer()&lt;/code&gt; no longer creates a &lt;code&gt;.copy&lt;/code&gt; variable in the presence of
duplicate column names. This makes it more consistent with the handling
of non-unique pivot specifications.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;df &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;tibble&lt;/span&gt;(id &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;, x &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;, x &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt;, .name_repair &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;minimal&amp;#34;&lt;/span&gt;)  
df &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;pivot_longer&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;id)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 6 x 3&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;      id name  value&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1     1 x         1&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2     1 x         4&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3     2 x         2&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4     2 x         5&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 5     3 x         3&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 6     3 x         6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pivot_longer()&lt;/code&gt; automatically disambiguates non-unique outputs, which can
occur when the input variables include some additional component that you
don&amp;rsquo;t care about and want to discard. You can discard parts of column names
either with &lt;code&gt;names_pattern&lt;/code&gt; or with &lt;code&gt;NA&lt;/code&gt; in &lt;code&gt;names_to&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;df &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;tibble&lt;/span&gt;(id &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;, x_1 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;, y_2 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt;, y_3 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;11&lt;/span&gt;)
df &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;pivot_longer&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;id, names_pattern &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;(.)_.&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 9 x 3&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;      id name  value&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1     1 x         1&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2     1 y         4&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3     1 y         9&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4     2 x         2&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 5     2 y         5&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 6     2 y        10&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 7     3 x         3&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 8     3 y         6&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 9     3 y        11&lt;/span&gt;
    
df &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;pivot_longer&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;id, names_sep &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;_&amp;#34;&lt;/span&gt;, names_to &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;NA&lt;/span&gt;))
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 9 x 3&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;      id name  value&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1     1 x         1&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2     1 y         4&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3     1 y         9&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4     2 x         2&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 5     2 y         5&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 6     2 y        10&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 7     3 x         3&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 8     3 y         6&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 9     3 y        11&lt;/span&gt;
    
df &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;pivot_longer&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;id, names_sep &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;_&amp;#34;&lt;/span&gt;, names_to &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;.value&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;NA&lt;/span&gt;))
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 6 x 3&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;      id     x     y&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1     1     1     4&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2     1    NA     9&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3     2     2     5&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4     2    NA    10&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 5     3     3     6&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 6     3    NA    11&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;pivot_wider&#34;&gt;&lt;code&gt;pivot_wider()&lt;/code&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pivot_wider()&lt;/code&gt; gains a &lt;code&gt;names_sort&lt;/code&gt; argument which allows you to sort
column names in order. The default, &lt;code&gt;FALSE&lt;/code&gt;, orders columns by their
first appearance. I&amp;rsquo;m considering changing the default value to &lt;code&gt;TRUE&lt;/code&gt;
in a future version.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;df &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;tibble&lt;/span&gt;(
  day_int &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;),
  day_fac &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;factor&lt;/span&gt;(day_int, labels &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Mon&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Tue&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Wed&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Thu&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Fri&amp;#34;&lt;/span&gt;))
)
df &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;pivot_wider&lt;/span&gt;(
  names_from &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; day_fac, 
  values_from &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; day_int
)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 1 x 5&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;     Thu   Wed   Fri   Mon   Tue&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1     4     3     5     1     2&lt;/span&gt;
df &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;pivot_wider&lt;/span&gt;(
  names_from &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; day_fac,
  names_sort &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;,
  values_from &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; day_int
)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 1 x 5&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;     Mon   Tue   Wed   Thu   Fri&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1     1     2     3     4     5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pivot_wider()&lt;/code&gt; gains a &lt;code&gt;names_glue&lt;/code&gt; argument that allows you to construct
output column names with a glue specification when &lt;code&gt;names_to&lt;/code&gt; includes
multiple columns.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;df &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;tibble&lt;/span&gt;(
  first &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;,
  second &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;,
  third &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;,
  val &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;
)
df &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;pivot_wider&lt;/span&gt;(
  names_from &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(first, second, third), 
  values_from &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; val,
  names_glue &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;{first}.{second}_{third}&amp;#34;&lt;/span&gt;
)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 1 x 1&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   a.1_X&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1     1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pivot_wider()&lt;/code&gt; arguments &lt;code&gt;values_fn&lt;/code&gt; and &lt;code&gt;values_fill&lt;/code&gt; can now be single
values; you now only need to use a named list if you want to use different
values for different value columns. You&amp;rsquo;ll also get better errors if
they&amp;rsquo;re not of the correct type.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally, both &lt;code&gt;pivot_wider()&lt;/code&gt; and &lt;code&gt;pivot_longer()&lt;/code&gt; are considerably more
performant, thanks largely to improvements in the underlying vctrs code
by 
&lt;a href=&#34;http://github.com/DavisVaughan&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Davis Vaughn&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;acknowledgements&#34;&gt;Acknowledgements&lt;/h2&gt;
&lt;p&gt;Thanks to all 135 people who contributed to this version of tidyr by discussing issues and suggesting new code! 
&lt;a href=&#34;https://github.com/abichat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@abichat&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/abiyug&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@abiyug&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/adisarid&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@adisarid&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/ahmohamed&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@ahmohamed&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/akikirinrin&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@akikirinrin&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/albertotb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@albertotb&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/alex-pax&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@alex-pax&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/amirmazmi&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@amirmazmi&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/andtheWings&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@andtheWings&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/ashiklom&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@ashiklom&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/atusy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@atusy&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/batpigandme&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@batpigandme&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/bertrandh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@bertrandh&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/BillBlanc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@BillBlanc&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/billdenney&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@billdenney&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/BrianDiggs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@BrianDiggs&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/bushdanielkwajaffa&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@bushdanielkwajaffa&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/cderv&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@cderv&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/CGMossa&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@CGMossa&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/cgoo4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@cgoo4&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/charliejhadley&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@charliejhadley&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/chester-gan&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@chester-gan&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/cimentadaj&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@cimentadaj&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/cjvanlissa&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@cjvanlissa&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/cloversleaves&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@cloversleaves&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/colearendt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@colearendt&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/dah33&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@dah33&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/DanOvando&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@DanOvando&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/dapperjapper&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@dapperjapper&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/daranzolin&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@daranzolin&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/davidhunterwalsh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@davidhunterwalsh&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/davisadamw&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@davisadamw&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/DavisVaughan&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@DavisVaughan&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/dchiu911&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@dchiu911&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/dpastoor&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@dpastoor&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/dpeterson71&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@dpeterson71&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/dpprdan&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@dpprdan&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/eantworth&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@eantworth&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/earcanal&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@earcanal&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/echasnovski&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@echasnovski&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/enixam&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@enixam&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/ericgunnink&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@ericgunnink&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/florianm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@florianm&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/fmmattioni&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@fmmattioni&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/franzbischoff&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@franzbischoff&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/GegznaV&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@GegznaV&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/geotheory&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@geotheory&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/ggrothendieck&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@ggrothendieck&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/gregorp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@gregorp&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/hadley&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@hadley&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/HanOostdijk&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@HanOostdijk&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/henry090&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@henry090&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/iago-pssjd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@iago-pssjd&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/ifellows&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@ifellows&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/infotroph&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@infotroph&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/jam1015&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@jam1015&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/jannikbuhr&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@jannikbuhr&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/jasonpcasey&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@jasonpcasey&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/jeffreypullin&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@jeffreypullin&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/jennybc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@jennybc&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/jenren&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@jenren&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/JenspederM&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@JenspederM&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/jeonghyunwoo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@jeonghyunwoo&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/jjnote&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@jjnote&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/jmh530&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@jmh530&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/JohnCoene&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@JohnCoene&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/joshua-theisen&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@joshua-theisen&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/JosiahParry&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@JosiahParry&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/jthomasmock&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@jthomasmock&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/jwilliman&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@jwilliman&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/kaneplusplus&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@kaneplusplus&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/kaybenleroll&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@kaybenleroll&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/kent37&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@kent37&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/kiernann&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@kiernann&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/krlmlr&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@krlmlr&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/lionel-&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@lionel-&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/Ljupch0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@Ljupch0&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/lymanmark&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@lymanmark&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/maelle&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@maelle&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/majazaloznik&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@majazaloznik&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/mattantaliss&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@mattantaliss&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/mattwarkentin&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@mattwarkentin&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/maurolepore&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@maurolepore&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/md0u80c9&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@md0u80c9&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/mgirlich&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@mgirlich&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/MikeEdinger&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@MikeEdinger&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/mikemahoney218&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@mikemahoney218&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/mikmart&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@mikmart&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/mitchelloharawild&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@mitchelloharawild&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/moodymudskipper&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@moodymudskipper&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/msberends&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@msberends&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/msgoussi&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@msgoussi&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/mstackhouse&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@mstackhouse&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/MyKo101&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@MyKo101&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/nacnudus&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@nacnudus&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/namelessjon&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@namelessjon&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/ndrewGele&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@ndrewGele&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/Nicktz&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@Nicktz&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/npjc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@npjc&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/osorensen&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@osorensen&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/PathosEthosLogos&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@PathosEthosLogos&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/philipp-baumann&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@philipp-baumann&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/PMSeitzer&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@PMSeitzer&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/psychelzh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@psychelzh&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/randomgambit&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@randomgambit&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/riinuots&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@riinuots&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/romagnolid&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@romagnolid&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/romainfrancois&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@romainfrancois&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/rvino&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@rvino&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/salim-b&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@salim-b&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/shanepiesik&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@shanepiesik&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/shannonpileggi&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@shannonpileggi&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/sharleenw&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@sharleenw&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/siddharthprabhu&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@siddharthprabhu&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/simazhi&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@simazhi&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/skr5k&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@skr5k&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/skydavis435&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@skydavis435&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/smingerson&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@smingerson&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/smithjd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@smithjd&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/srnnkls&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@srnnkls&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/stragu&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@stragu&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/stufield&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@stufield&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/tangcxx&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@tangcxx&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/tdhock&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@tdhock&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/the-Zian&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@the-Zian&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/tomhopper&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@tomhopper&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/topepo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@topepo&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/wgrundlingh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@wgrundlingh&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/wibeasley&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@wibeasley&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/william3031&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@william3031&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/wmoldham&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@wmoldham&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/wolski&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@wolski&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/xkdog&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@xkdog&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/xtimbeau&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@xtimbeau&lt;/a&gt;, and 
&lt;a href=&#34;https://github.com/yusuzech&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@yusuzech&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>rules 0.0.1</title>
      <link>/blog/2020/05/rules-0-0-1/</link>
      <pubDate>Thu, 21 May 2020 00:00:00 +0000</pubDate>
      <guid>/blog/2020/05/rules-0-0-1/</guid>
      <description>&lt;p&gt;We are happy to announce the release of the 
&lt;a href=&#34;https://rules.tidymodels.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;rules package&lt;/a&gt; on 
&lt;a href=&#34;https://cran.r-project.org/package=rules&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CRAN&lt;/a&gt;. rules is another &amp;ldquo;parsnip-adjacent&amp;rdquo; package that enables a specific class of models within the tidymodels infrastructure.  rules currently contains three models:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;C5_rules()&lt;/code&gt;: classification rule sets based on the C5.0 model.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cubist_rules()&lt;/code&gt;: regression rules using Cubist.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;rule_fit()&lt;/code&gt;: classification or regression rules using the RuleFit model.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you aren&amp;rsquo;t familiar with rule-based models, there is a 
&lt;a href=&#34;https://rviews.rstudio.com/2020/05/21/modern-rule-based-models/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;companion blog post&lt;/a&gt; that summarizes how they work.&lt;/p&gt;
&lt;p&gt;Install rules from CRAN like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;install.packages&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;rules&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then attach it for use via:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(rules)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here&amp;rsquo;s an example of creating Cubist regression rules via the 
&lt;a href=&#34;https://tune.tidymodels.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;parsnip package&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(tidymodels)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Attaching packages ──────────────────────────────────── tidymodels 0.1.0 ──&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ broom     0.5.6      ✓ recipes   0.1.12&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ dials     0.0.6      ✓ rsample   0.0.6&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ dplyr     0.8.5      ✓ tibble    3.0.1&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ ggplot2   3.3.0      ✓ tune      0.1.0&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ infer     0.5.1      ✓ workflows 0.1.1&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ parsnip   0.1.1      ✓ yardstick 0.0.6&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ purrr     0.3.4&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Conflicts ─────────────────────────────────────── tidymodels_conflicts() ──&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; x purrr::accumulate() masks foreach::accumulate()&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; x purrr::discard()    masks scales::discard()&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; x dplyr::filter()     masks stats::filter()&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; x dplyr::lag()        masks stats::lag()&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; x ggplot2::margin()   masks dials::margin()&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; x recipes::step()     masks stats::step()&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; x purrr::when()       masks foreach::when()&lt;/span&gt;
&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(rules)

&lt;span style=&#34;color:#00f&#34;&gt;data&lt;/span&gt;(car_prices, package &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;modeldata&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#00f&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;9932&lt;/span&gt;)
car_split &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;initial_split&lt;/span&gt;(car_prices)
car_tr &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;training&lt;/span&gt;(car_split)
car_te &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;testing&lt;/span&gt;(car_split)

&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# A single rule set:&lt;/span&gt;
cubist_mod &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;cubist_rules&lt;/span&gt;(neighbors &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;7&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;set_engine&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Cubist&amp;#34;&lt;/span&gt;)

cubist_fit &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;
  cubist_mod &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;fit&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;log10&lt;/span&gt;(Price) &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; ., data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; car_tr)

&lt;span style=&#34;color:#00f&#34;&gt;summary&lt;/span&gt;(cubist_fit&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;fit)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Call:&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; cubist.default(x = x, y = y, committees = 1)&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Cubist [Release 2.07 GPL Edition]  Wed May 20 21:39:22 2020&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ---------------------------------&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;     Target attribute `outcome&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Read 603 cases (18 attributes) from undefined.data&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Model:&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   Rule 1: [210 cases, mean 4.116360, range 3.94295 to 4.2505, est err 0.030756]&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;     if&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	Cylinder &amp;lt;= 4&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	Saab &amp;lt;= 0&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;     then&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	outcome = 4.115185 + 0.12 Saab - 3.5e-06 Mileage + 0.017 Cylinder&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	          - 0.087 hatchback - 0.029 Chevy + 0.046 wagon + 0.028 Leather&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	          + 0.041 Cadillac - 0.024 sedan + 0.027 convertible&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	          + 0.006 Doors + 0.012 Buick&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   Rule 2: [8 cases, mean 4.207121, range 4.13308 to 4.26696, est err 0.006589]&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;     if&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	Cylinder &amp;gt; 4&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	Saturn &amp;gt; 0&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;     then&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	outcome = 3.88624 + 0.057 Cylinder + 0.2 Saab + 0.141 Cadillac&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	          - 3.8e-06 Mileage - 0.054 sedan + 0.094 convertible&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	          - 0.085 hatchback + 0.019 Doors + 0.04 Buick + 0.014 Cruise&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	          + 0.01 Leather + 0.007 Sound + 0.007 Saturn&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   Rule 3: [33 cases, mean 4.229076, range 4.16741 to 4.29184, est err 0.012903]&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;     if&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	Cylinder &amp;gt; 4&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	Cruise &amp;lt;= 0&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;     then&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	outcome = 4.265627 - 3.7e-06 Mileage + 0.039 Chevy&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   Rule 4: [94 cases, mean 4.272727, range 4.18913 to 4.4427, est err 0.034717]&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;     if&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	Mileage &amp;gt; 3946&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	Cylinder &amp;gt; 4&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	Doors &amp;gt; 2&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	Cruise &amp;gt; 0&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	Buick &amp;lt;= 0&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	Cadillac &amp;lt;= 0&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	Saturn &amp;lt;= 0&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;     then&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	outcome = 4.037203 + 0.051 Cylinder - 4.3e-06 Mileage + 0.061 Saab&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	          + 0.044 Cadillac - 0.016 sedan + 0.029 convertible&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	          - 0.026 hatchback + 0.006 Doors - 0.009 Chevy + 0.012 Buick&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	          + 0.004 Cruise&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   Rule 5: [57 cases, mean 4.314541, range 4.17208 to 4.42864, est err 0.049758]&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;     if&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	Buick &amp;gt; 0&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;     then&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	outcome = 4.389884 - 3e-06 Mileage&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   Rule 6: [9 cases, mean 4.341528, range 4.23957 to 4.66962, est err 0.036309]&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;     if&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	Mileage &amp;lt;= 3946&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	Cylinder &amp;gt; 4&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	Cadillac &amp;lt;= 0&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;     then&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	outcome = 3.439093 + 5.28e-05 Mileage + 0.129 Cylinder&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   Rule 7: [43 cases, mean 4.354487, range 4.1778 to 4.60071, est err 0.031792]&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;     if&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	Cylinder &amp;gt; 4&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	Doors &amp;lt;= 2&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	Cruise &amp;gt; 0&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	convertible &amp;lt;= 0&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;     then&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	outcome = 3.40984 + 0.13 Cylinder + 0.116 Chevy - 2.7e-06 Mileage&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	          + 0.037 Sound + 0.031 Leather&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   Rule 8: [85 cases, mean 4.462877, range 4.34723 to 4.58348, est err 0.023398]&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;     if&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	Saab &amp;gt; 0&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;     then&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	outcome = 4.522928 - 3.4e-06 Mileage + 0.064 Saab - 0.021 Doors&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	          - 0.035 sedan + 0.009 Cylinder + 0.022 Cadillac&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	          - 0.024 hatchback + 0.015 convertible - 0.004 Chevy&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	          + 0.006 Buick&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   Rule 9: [60 cases, mean 4.592824, range 4.44778 to 4.84976, est err 0.041948]&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;     if&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	Cadillac &amp;gt; 0&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;     then&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	outcome = 4.774347 - 0.103 Doors + 0.036 Cylinder - 3.4e-06 Mileage&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   Rule 10: [7 cases, mean 4.625017, range 4.58911 to 4.6727, est err 0.006627]&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;     if&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	Cylinder &amp;gt; 4&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	Cadillac &amp;lt;= 0&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	convertible &amp;gt; 0&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;     then&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	outcome = 4.693132 - 3.9e-06 Mileage&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Evaluation on training data (603 cases):&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;     Average  |error|           0.032526&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;     Relative |error|               0.23&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;     Correlation coefficient        0.97&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	Attribute usage:&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	  Conds  Model&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	   67%    84%    Cylinder&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	   49%    66%    Saab&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	   28%    66%    Cadillac&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	   28%    17%    Cruise&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	   25%    66%    Buick&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	   23%    75%    Doors&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	   17%   100%    Mileage&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	   17%     1%    Saturn&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	    8%    66%    convertible&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	          77%    Chevy&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	          66%    hatchback&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	          66%    sedan&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	          43%    Leather&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	          35%    wagon&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	           8%    Sound&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Time: 0.0 secs&lt;/span&gt;

&lt;span style=&#34;color:#00f&#34;&gt;predict&lt;/span&gt;(cubist_fit, car_te &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;select&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;Price))
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 201 x 1&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    .pred&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1  4.32&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2  4.49&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3  4.54&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4  4.54&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5  4.43&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6  4.43&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7  4.46&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8  4.44&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9  4.37&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10  4.48&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 191 more rows&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The functions also work with the 
&lt;a href=&#34;https://tune.tidymodels.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tune package&lt;/a&gt;. To optimize our model, the number of committees (similar to boosting iterations) and the number of nearest-neighbors are the primary parameters for tuning.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;cb_grid &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;expand.grid&lt;/span&gt;(committees &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;30&lt;/span&gt;, neighbors &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt;))

&lt;span style=&#34;color:#00f&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;8226&lt;/span&gt;)
car_folds &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;vfold_cv&lt;/span&gt;(car_tr)

cubist_mod &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;cubist_rules&lt;/span&gt;(neighbors &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;tune&lt;/span&gt;(), committees &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;tune&lt;/span&gt;()) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;set_engine&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Cubist&amp;#34;&lt;/span&gt;)

car_tune_res &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;
  cubist_mod &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;tune_grid&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;log10&lt;/span&gt;(Price) &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; ., resamples &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; car_folds, grid &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; cb_grid)

car_tune_res &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;collect_metrics&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;filter&lt;/span&gt;(.metric &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;rmse&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;mutate&lt;/span&gt;(neighbors &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;factor&lt;/span&gt;(neighbors)) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;ggplot&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; committees, y &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; mean, col &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; neighbors)) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;geom_point&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;geom_line&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;scale_color_brewer&lt;/span&gt;(palette &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Dark2&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;theme&lt;/span&gt;(legend.position &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;top&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;/blog/2020-05-rules-0-0-1/index_files/figure-html/cb-tune-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;
&lt;span style=&#34;color:#00f&#34;&gt;show_best&lt;/span&gt;(car_tune_res, metric &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;rmse&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 5 x 7&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   committees neighbors .metric .estimator   mean     n std_err&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;        &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;       &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1          9         9 rmse    standard   0.0395    10 0.00133&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2          5         9 rmse    standard   0.0395    10 0.00132&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3         11         9 rmse    standard   0.0395    10 0.00133&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4         13         9 rmse    standard   0.0395    10 0.00132&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 5          8         9 rmse    standard   0.0395    10 0.00131&lt;/span&gt;

smallest_rmse &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;select_best&lt;/span&gt;(car_tune_res, metric &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;rmse&amp;#34;&lt;/span&gt;)
smallest_rmse
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 1 x 2&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   committees neighbors&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;        &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1          9         9&lt;/span&gt;

final_cb_mod &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;
  cubist_mod &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;finalize_model&lt;/span&gt;(smallest_rmse) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;fit&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;log10&lt;/span&gt;(Price) &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; ., data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; car_tr)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It appears that the benefit of using committees occurs in the first 10 iterations. The nearest-neighbor adjustment was important to obtaining good performance.&lt;/p&gt;
&lt;p&gt;The test set results look good and are consistent with the resampling estimate of RMSE:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;test_pred &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;predict&lt;/span&gt;(final_cb_mod, car_te) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;bind_cols&lt;/span&gt;(car_te &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;select&lt;/span&gt;(Price)) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;mutate&lt;/span&gt;(Price &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;log10&lt;/span&gt;(Price))

test_pred &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;rmse&lt;/span&gt;(Price, .pred)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 1 x 3&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   .metric .estimator .estimate&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 rmse    standard      0.0382&lt;/span&gt;

&lt;span style=&#34;color:#00f&#34;&gt;ggplot&lt;/span&gt;(test_pred, &lt;span style=&#34;color:#00f&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; .pred, y &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; Price)) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;geom_abline&lt;/span&gt;(col &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;green&amp;#34;&lt;/span&gt;, lty &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;geom_point&lt;/span&gt;(alpha &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0.5&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;coord_fixed&lt;/span&gt;(ratio &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;/blog/2020-05-rules-0-0-1/index_files/figure-html/cb-test-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;d like to thank 
&lt;a href=&#34;https://github.com/holub008&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Karl Holub&lt;/a&gt; for making the 
&lt;a href=&#34;https://github.com/holub008/xrf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;xrf package&lt;/a&gt; and accepting my PRs and changes.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Updates to ragg and systemfonts</title>
      <link>/blog/2020/05/updates-to-ragg-and-systemfonts/</link>
      <pubDate>Fri, 15 May 2020 00:00:00 +0000</pubDate>
      <guid>/blog/2020/05/updates-to-ragg-and-systemfonts/</guid>
      <description>&lt;p&gt;We&amp;rsquo;re thrilled to announce the new releases of ragg and systemfonts. ragg is a package that provides a modern set of raster devices as alternatives to the ones you know from the grDevices package (e.g. &lt;code&gt;png()&lt;/code&gt;). systemfonts is a low level package that provides font-related utilities to graphic devices, most importantly detecting and matching fonts to the correct font files across systems.&lt;/p&gt;
&lt;p&gt;While these are not the most flashy of releases, we thought it would be a good time to discuss some of our thoughts on the future of graphics in R, especially related to fonts.&lt;/p&gt;
&lt;h2 id=&#34;ragg-020&#34;&gt;ragg 0.2.0&lt;/h2&gt;
&lt;p&gt;ragg is our take on a modern set of raster devices for R, based based on the AGG 2D graphics library which provides both 
&lt;a href=&#34;https://ragg.r-lib.org/articles/ragg_quality.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;high quality&lt;/a&gt; and 
&lt;a href=&#34;https://ragg.r-lib.org/articles/ragg_performance.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;high performance&lt;/a&gt; output (you can read more about it in 
&lt;a href=&#34;https://www.tidyverse.org/blog/2019/07/ragg-0-1-0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;the 0.1.0 release post&lt;/a&gt;). It also provides high quality font support and automatically finds fonts installed on your computer.&lt;/p&gt;
&lt;p&gt;This release has resolved many rendering bugs and include one major new features: the addition of a jpeg device (&lt;code&gt;agg_jpeg()&lt;/code&gt;) that produces jpegs. jpeg is a lossy image format (i.e. it decreases the image quality to reduce file size) as opposed to png which uses a lossless compression scheme. That means that jpeg is usually not the best choice for most R graphics, but it does excel in compressing image data, so for this type of plot it can offer a very high compression with almost no noticeable degradation in quality:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(ragg)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Warning: package &amp;#39;ragg&amp;#39; was built under R version 3.6.2&lt;/span&gt;
&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(fs)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Warning: package &amp;#39;fs&amp;#39; was built under R version 3.6.2&lt;/span&gt;

&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Creating some image data&lt;/span&gt;
&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(ambient)
&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(dplyr)
noise &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;long_grid&lt;/span&gt;(
    x &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;seq&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, length.out &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2000&lt;/span&gt;), 
    y &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;seq&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, length.out &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2000&lt;/span&gt;)
  ) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;mutate&lt;/span&gt;(
    z &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;fracture&lt;/span&gt;(
      noise &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; gen_worley, 
      fractal &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; billow, 
      octaves &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;, 
      gain &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; .x &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0.75&lt;/span&gt;,
      frequency &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; .x &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;,
      x &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; x, 
      y &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; y,
      value &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;distance&amp;#34;&lt;/span&gt;,
      seed &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;
    )
  )

&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# plot using png&lt;/span&gt;
pngfile &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;path&lt;/span&gt;(knitr&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;fig_path&lt;/span&gt;(),  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;png_image.png&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#00f&#34;&gt;agg_png&lt;/span&gt;(pngfile, &lt;span style=&#34;color:#666&#34;&gt;2000&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;2000&lt;/span&gt;)
&lt;span style=&#34;color:#00f&#34;&gt;plot&lt;/span&gt;(noise, z)
&lt;span style=&#34;color:#00f&#34;&gt;invisible&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;dev.off&lt;/span&gt;())
knitr&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;include_graphics&lt;/span&gt;(pngfile)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-1-1/png_image.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# plot using jpeg&lt;/span&gt;
jpegfile &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;path&lt;/span&gt;(knitr&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;fig_path&lt;/span&gt;(),  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;jpeg_image.jpeg&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#00f&#34;&gt;agg_jpeg&lt;/span&gt;(jpegfile, &lt;span style=&#34;color:#666&#34;&gt;2000&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;2000&lt;/span&gt;)
&lt;span style=&#34;color:#00f&#34;&gt;plot&lt;/span&gt;(noise, z)
&lt;span style=&#34;color:#00f&#34;&gt;invisible&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;dev.off&lt;/span&gt;())

knitr&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;include_graphics&lt;/span&gt;(jpegfile)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-2-1/jpeg_image.jpeg&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;As you can hopefully agree on, there is no noticeable quality difference between the two. What about file size?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;file_size&lt;/span&gt;(pngfile)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 944K&lt;/span&gt;
&lt;span style=&#34;color:#00f&#34;&gt;file_size&lt;/span&gt;(jpegfile)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 387K&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We observe more than a 50% file size reduction. Again, this is only worth it when saving image-type plots with high-frequency variations. &lt;code&gt;agg_png()&lt;/code&gt; should be your go-to device for most data visualizations.&lt;/p&gt;
&lt;h2 id=&#34;systemfonts-020&#34;&gt;systemfonts 0.2.0&lt;/h2&gt;
&lt;p&gt;systemfonts is a package that spun out of the development of ragg. Its main claim-to-fame is its ability to find the correct font file for a specific font and style. This release has improved a lot of the underlying implementation and added a bunch of new features that may interest you.&lt;/p&gt;
&lt;h3 id=&#34;why-is-text-so-hard&#34;&gt;Why is text so hard?&lt;/h3&gt;
&lt;p&gt;Before we delve into the features of systemfonts it may be good to understand why fonts don&amp;rsquo;t just work. At its core text and fonts are just very messy, with differences between operating systems and font file formats to name some of the challenges. (For a humorous overview consult the 
&lt;a href=&#34;https://gankra.github.io/blah/text-hates-you/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;Text Rendering Hates You&lt;/em&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;There are simply so many issues related to how finding the font files, reading the content, figuring out the correct glyphs for a character string, and determining the correct position of each glyph, that most applications use high-level solutions such as those provided by the operating system or e.g. 
&lt;a href=&#34;https://www.pango.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pango&lt;/a&gt;. This is not really an option for graphic devices as text is used in many other ways than the standard &amp;ldquo;text box&amp;rdquo; use that the high-level solutions are tailored to. All-in-all this makes it rather difficult to do fully correct text rendering on graphics device.&lt;/p&gt;
&lt;h3 id=&#34;new-features&#34;&gt;New features&lt;/h3&gt;
&lt;p&gt;The core functionality of systemfonts (finding font files) has been expanded with this release. It now makes heavy use of caching to speed up the font queries that may happen many hundreds of times for a single plot. This gives a nice speed boost, but comes at a cost: if a font is installed while your R session is running, you&amp;rsquo;ll need to explicitly run &lt;code&gt;systemfonts::reset_font_cache()&lt;/code&gt; in order to flush the cache.&lt;/p&gt;
&lt;p&gt;systemfonts has also gained the ability to register fonts that are not installed in the usual place so that e.g. packages can provide a new set of fonts. This is done with the &lt;code&gt;register_font()&lt;/code&gt; function. The font registration can also be used to get access to fonts that are not easily targeted with the limited information you can pass through the graphic engine in R (family, bold-or-not, italic-or-not), or if you want to overwrite the system-specific mappings of &lt;code&gt;&#39;sans&#39;&lt;/code&gt;, &lt;code&gt;&#39;serif&#39;&lt;/code&gt;, and &lt;code&gt;&#39;mono&#39;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Apart from font file matching, systemfonts now also provides the basic infrastructure for text shaping, that is, figuring out the placement of glyphs on a page, taking size, kerning, etc. into account. It further provides efficient functions for calculating string widths and glyph dimensions, something needed if you choose to implement a graphic device.&lt;/p&gt;
&lt;p&gt;The text shaping, font information, and glyph metrics are available from R, although the intended use is primarily from C:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(systemfonts)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Warning: package &amp;#39;systemfonts&amp;#39; was built under R version 3.6.2&lt;/span&gt;

&lt;span style=&#34;color:#00f&#34;&gt;font_info&lt;/span&gt;(family &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;spectral&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 1 x 22&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   path  index family style italic bold  monospace kerning color scalable&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt; &amp;lt;lgl&amp;gt;  &amp;lt;lgl&amp;gt; &amp;lt;lgl&amp;gt;     &amp;lt;lgl&amp;gt;   &amp;lt;lgl&amp;gt; &amp;lt;lgl&amp;gt;   &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 /Sys…     0 Helve… Regu… FALSE  FALSE FALSE     FALSE   FALSE TRUE    &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 12 more variables: vertical &amp;lt;lgl&amp;gt;, n_glyphs &amp;lt;int&amp;gt;, n_sizes &amp;lt;int&amp;gt;,&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; #   n_charmaps &amp;lt;int&amp;gt;, bbox &amp;lt;list&amp;gt;, max_ascend &amp;lt;dbl&amp;gt;, max_descend &amp;lt;dbl&amp;gt;,&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; #   max_advance_width &amp;lt;dbl&amp;gt;, max_advance_height &amp;lt;dbl&amp;gt;, lineheight &amp;lt;dbl&amp;gt;,&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; #   underline_pos &amp;lt;dbl&amp;gt;, underline_size &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;glyph_info&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;glyphs&amp;#34;&lt;/span&gt;, family &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;spectral&amp;#34;&lt;/span&gt;, size &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;14&lt;/span&gt;)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 6 x 9&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   glyph index width height x_bearing y_bearing x_advance y_advance bbox     &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;list&amp;gt;   &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 g        74     7     10         0         7         8         0 &amp;lt;dbl [4]&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2 l        79     3     10         0        10         3         0 &amp;lt;dbl [4]&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3 y        92     7     10         0         7         7         0 &amp;lt;dbl [4]&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4 p        83     8     10         0         7         8         0 &amp;lt;dbl [4]&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 5 h        75     7     10         0        10         8         0 &amp;lt;dbl [4]&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 6 s        86     7      7         0         7         7         0 &amp;lt;dbl [4]&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;text &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;This is an example of the current text shaping engine build in to systemfonts. It does automatic text wrapping and support advanced layout features such as first-line and hanging indent. It also support setting &amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;tracking&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34; on some word and generally mixing text with different &amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;fonts, &amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;sizes,&amp;#34;&lt;/span&gt;, 
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34; and styles.&amp;#34;&lt;/span&gt;
) 
family &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;charter&amp;#39;&lt;/span&gt;, 
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;charter&amp;#39;&lt;/span&gt;, 
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;charter&amp;#39;&lt;/span&gt;, 
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;exo 2&amp;#39;&lt;/span&gt;, 
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;charter&amp;#39;&lt;/span&gt;, 
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;charter&amp;#39;&lt;/span&gt;
)
italic &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;rep&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FALSE&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;), &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;)
bold &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;rep&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FALSE&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;), &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;)
style &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;rep&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;plain&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;), &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;bold.italic&amp;#34;&lt;/span&gt;)
size &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;rep&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;), &lt;span style=&#34;color:#666&#34;&gt;24&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;14&lt;/span&gt;)
shape &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;shape_string&lt;/span&gt;(
  text, 
  id &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, 
  family &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; family,
  italic &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; italic,
  bold &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; bold,
  size &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; size,
  tracking &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;400&lt;/span&gt;, &lt;span style=&#34;color:#00f&#34;&gt;rep&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;)),
  width &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4.5&lt;/span&gt;,
  indent &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0.2&lt;/span&gt;,
  hjust &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0.5&lt;/span&gt;,
  vjust &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0.5&lt;/span&gt;,
  res &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;300&lt;/span&gt;
)

shape
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $shape&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 299 x 7&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    glyph index metric_id string_id x_offset y_offset x_midpoint&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt;     &amp;lt;int&amp;gt;     &amp;lt;int&amp;gt;    &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1 &amp;#34;T&amp;#34;      55         1         1   -133.      47.7       4.2 &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2 &amp;#34;h&amp;#34;      75         1         1   -125.      47.7       3.96&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3 &amp;#34;i&amp;#34;      76         1         1   -117.      47.7       1.92&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4 &amp;#34;s&amp;#34;      86         1         1   -113.      47.7       2.76&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5 &amp;#34; &amp;#34;       3         1         1   -108.      47.7       1.92&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6 &amp;#34;i&amp;#34;      76         1         1   -104.      47.7       1.92&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7 &amp;#34;s&amp;#34;      86         1         1    -99.8     47.7       2.76&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8 &amp;#34; &amp;#34;       3         1         1    -94.3     47.7       1.92&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9 &amp;#34;a&amp;#34;      68         1         1    -90.5     47.7       3.48&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10 &amp;#34;n&amp;#34;      81         1         1    -83.5     47.7       3.96&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 289 more rows&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $metrics&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 1 x 11&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   string width height left_bearing right_bearing top_bearing bottom_bearing&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;chr&amp;gt;  &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt;         &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;          &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 This …  1350   582.           -1            15        13.8           1.02&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 4 more variables: left_border &amp;lt;dbl&amp;gt;, top_border &amp;lt;dbl&amp;gt;, pen_x &amp;lt;dbl&amp;gt;,&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; #   pen_y &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(grid)

pngfile &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;path&lt;/span&gt;(knitr&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;fig_path&lt;/span&gt;(),  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;png_image.png&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#00f&#34;&gt;agg_png&lt;/span&gt;(pngfile, &lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;2.5&lt;/span&gt;, unit &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;in&amp;#39;&lt;/span&gt;, res &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;300&lt;/span&gt;)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Warning in agg_png(pngfile, 6, 2.5, unit = &amp;#34;in&amp;#34;, res = 300): partial argument&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; match of &amp;#39;unit&amp;#39; to &amp;#39;units&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#00f&#34;&gt;grid.text&lt;/span&gt;(
  shape&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;shape&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;glyph, 
  x &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;unit&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;0.5&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;npc&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;unit&lt;/span&gt;(shape&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;shape&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;x_offset, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;pt&amp;#34;&lt;/span&gt;), 
  y &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;unit&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;0.5&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;npc&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;unit&lt;/span&gt;(shape&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;shape&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;y_offset, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;pt&amp;#34;&lt;/span&gt;),
  hjust &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;,
  vjust &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;,
  gp &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;gpar&lt;/span&gt;(
    fontfamily &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; family[shape&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;shape&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;string_id],
    fontface &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; style[shape&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;shape&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;string_id],
    fontsize &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; size[shape&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;shape&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;string_id]
  )
)
&lt;span style=&#34;color:#00f&#34;&gt;invisible&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;dev.off&lt;/span&gt;())
knitr&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;include_graphics&lt;/span&gt;(pngfile)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-7-1/png_image.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;When you see this you may immediately think of the work Claus Wilke has done with 
&lt;a href=&#34;https://wilkelab.org/gridtext/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gridtext&lt;/a&gt;. We are both committed to improving the rich text support in R, and are attacking the problem from different directions. Claus has worked on doing per-word shaping, whereas the text shaping done in systemfonts are done glyph-by-glyph. Both approaches have their merits, and we are currently at a stage where we are trying to figure out how to best solve this in R. At the time of writing there is no doubt that gridtext is more complete and stable, but doing glyph-based shaping offers possibilities that are not possible with gridtext, e.g. setting tracking and flowing text along paths. All of this is highly experimental still, and there will need to be some changes in the graphic engine to make glyph-based rendering performant.&lt;/p&gt;
&lt;h3 id=&#34;the-font-ier&#34;&gt;The font-ier&lt;/h3&gt;
&lt;p&gt;A big (for some) issue that I haven&amp;rsquo;t touched upon is support for ligatures. A &lt;strong&gt;ligature&lt;/strong&gt; is a glyph that represents multiple characters, as when &amp;ldquo;f&amp;rdquo; and &amp;ldquo;i&amp;rdquo; are substituted for the single glyph &amp;ldquo;ﬁ&amp;rdquo;. Ligatures are often used as flourishes in Western scripts but are essential for other scripts such as Arabic. Further, ligatures power emojis which have become an integral part of modern communication.&lt;/p&gt;
&lt;p&gt;While we don&amp;rsquo;t currently have support for ligatures, there&amp;rsquo;s no doubt that we need it. The exact mechanism for this is still up in the air because ligatures must be resolved at the font rendering level. Each font file may provide their own unique ligatures and the mapping from multiple characters to a single glyph can be encoded into a number of different substitution table formats in the font file. Because of this complexity it is often handled by a dedicated library such as 
&lt;a href=&#34;https://www.freedesktop.org/wiki/Software/HarfBuzz/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HarfBuzz&lt;/a&gt;. This could of course be wrapped by an R package but since ligatures can not be encoded with unicode (for the most part), there is no way of precomputing the substitution and pass it on to the graphic devices. Whether ligature support can retroactively be added to old graphic devices is thus still up in the air.&lt;/p&gt;
&lt;p&gt;Text rendering in R is a delicate collaboration between graphic devices, the graphic engine, and additional support packages such as systemfonts and gridtext, but thankfully the focus and will is there in all parts to push this forward.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>usethis 1.6.0</title>
      <link>/blog/2020/04/usethis-1-6-0/</link>
      <pubDate>Sat, 11 Apr 2020 00:00:00 +0000</pubDate>
      <guid>/blog/2020/04/usethis-1-6-0/</guid>
      <description>&lt;p&gt;We&amp;rsquo;re happy to announce that 
&lt;a href=&#34;https://usethis.r-lib.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;usethis&lt;/a&gt; 1.6.0 is now available on CRAN. usethis is a package that facilitates interactive workflows for R project creation and development. It&amp;rsquo;s mostly focussed on easing day-to-day package development, but many of its functions are also useful for non-package projects. Install usethis with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;install.packages&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;usethis&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This blog post discusses three sets of improvements to usethis:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;New helpers for using GitHub Actions for continuous integration. If you&amp;rsquo;re an
R package developer who uses GitHub, we recommend moving away from Travis and
AppVeyor in favour of GitHub Actions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We&amp;rsquo;ve made a number of small tweaks to &lt;code&gt;create_package()&lt;/code&gt; in order to reduce
inessential friction in the initial startup phase of a package.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We&amp;rsquo;ve continued to polish our tools for contributing to other people&amp;rsquo;s
packages through GitHub pull requests.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This release also includes a handful of new functions (my favourite is 
&lt;a href=&#34;https://usethis.r-lib.org/reference/rename_files.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;rename_file()&lt;/code&gt;&lt;/a&gt;), many bug fixes, and lots of small improvements. We&amp;rsquo;re slowly grinding down the rough edges, so usethis just works in more cases, and when it fails, it&amp;rsquo;s more likely to give you error messages that help you quickly figure out the problem. As usual, you can find detailed notes about all these changes in the 
&lt;a href=&#34;https://usethis.r-lib.org/news/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;change log&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;github-actions&#34;&gt;GitHub Actions&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/features/actions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub Actions&lt;/a&gt; is a continuous integration service that allows you to automatically run code whenever you push to GitHub. If you&amp;rsquo;re developing a package this allows you to automate tasks like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Run &lt;code&gt;R CMD check&lt;/code&gt; on multiple platforms (Linux, Windows, and Mac) and
different versions of R (e.g., devel, release, oldrel).&lt;/li&gt;
&lt;li&gt;Record the code coverage of your unit tests.&lt;/li&gt;
&lt;li&gt;Re-build your 
&lt;a href=&#34;https://pkgdown.r-lib.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pkgdown&lt;/a&gt; website.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Outside of a package, you can also use GitHub Actions to rebuild 
&lt;a href=&#34;https://github.com/r-lib/actions/blob/master/examples/blogdown.yaml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;blogdown&lt;/a&gt; and 
&lt;a href=&#34;https://github.com/r-lib/actions/blob/master/examples/bookdown.yaml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;bookdown&lt;/a&gt; sites, or regularly re-knit &lt;code&gt;.Rmd&lt;/code&gt; files.&lt;/p&gt;
&lt;p&gt;Each GitHub Actions &lt;em&gt;workflow&lt;/em&gt; is described in a yaml file stored in the &lt;code&gt;.github/workflows&lt;/code&gt; directory of your repository. usethis v1.6.0 introduces new helper functions to create these files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/r-lib/actions/blob/master/examples/check-standard.yaml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;use_github_action(&amp;quot;check-standard&amp;quot;)&lt;/code&gt;&lt;/a&gt; runs &lt;code&gt;R CMD check&lt;/code&gt; on the latest
R release on Linux, Windows, and macOS, and R-devel on macOS. This ensures
that your package works on all major operating systems, and alerts you to
any potential problems in the next version of R.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/r-lib/actions/blob/master/examples/test-coverage.yaml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;use_github_action(&amp;quot;test-coverage&amp;quot;)&lt;/code&gt;&lt;/a&gt;
uses 
&lt;a href=&#34;http://covr.r-lib.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;covr&lt;/a&gt; to measure the test coverage of your package
and publishes it to &lt;a href=&#34;http://codecov.io/&#34;&gt;http://codecov.io/&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/r-lib/actions/blob/master/examples/pkgdown.yaml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;use_github_action(&amp;quot;pkgdown&amp;quot;)&lt;/code&gt;&lt;/a&gt;
uses 
&lt;a href=&#34;https://pkgdown.r-lib.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pkgdown&lt;/a&gt; to build your package website and
publishes it to the &lt;code&gt;gh-pages&lt;/code&gt; branch.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can see examples of other workflows at &lt;a href=&#34;https://github.com/r-lib/actions/tree/master/examples&#34;&gt;https://github.com/r-lib/actions/tree/master/examples&lt;/a&gt;. The files in this directory are templates that you can easily copy into your package by running &lt;code&gt;use_github_action(&amp;quot;name&amp;quot;)&lt;/code&gt;. We encourage you to look at the &lt;code&gt;.yaml&lt;/code&gt; files that these functions create and customise them to meet your needs.&lt;/p&gt;
&lt;p&gt;Compared to Travis-CI, GitHub Actions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Provides more resources, i.e. 6 hour build times and 20 concurrent builds
instead of 50 minute build times and ~5 concurrent builds.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Has more complete support for building on Windows and macOS and a more
natural way of using Docker containers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Doesn&amp;rsquo;t require any extra authentication because all code is run on GitHub.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Is considerably easier to customise to provide workflows that we haven&amp;rsquo;t
made easy.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can learn more by reading 
&lt;a href=&#34;https://ropenscilabs.github.io/actions_sandbox/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;Github Actions with R&lt;/em&gt;&lt;/a&gt;, by Chris Brown, Murray Cadzow, Paula A Martinez, Rhydwyn McGuire, David Neuzerling, David Wilkinson, and Saras Windecker, or watching Jim Hester&amp;rsquo;s 
&lt;a href=&#34;https://resources.rstudio.com/rstudio-conf-2020/azure-pipelines-and-github-actions-jim-hester&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;rstudio::conf(2020) presentation&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;creating-packages&#34;&gt;Creating packages&lt;/h2&gt;
&lt;p&gt;Based on our experience teaching package development, we&amp;rsquo;ve made a few changes to how &lt;code&gt;create_package()&lt;/code&gt; sets up a new package. The biggest difference is that we now assume that you&amp;rsquo;re going to use roxygen2&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; (although you can opt out with &lt;code&gt;roxygen = FALSE&lt;/code&gt;), reducing some inconsistencies in development behaviours before and after your first run of &lt;code&gt;devtools::document()&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We automatically add a &lt;code&gt;RoxygenNote&lt;/code&gt; field to the &lt;code&gt;DESCRIPTION&lt;/code&gt;. This is a
subtle change that ensures &lt;code&gt;devtools::check()&lt;/code&gt; re-documents your package even
when you haven&amp;rsquo;t yet run &lt;code&gt;devtools::document()&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The default &lt;code&gt;NAMESPACE&lt;/code&gt; no longer exports anything. This means that you
must always use &lt;code&gt;@export&lt;/code&gt; if you want functions to be available to the
end-user.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We made a couple of small changes to ease other minor frustrations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;use_rstudio()&lt;/code&gt; now sets the &lt;code&gt;LineEndingConversion&lt;/code&gt; to &lt;code&gt;Posix&lt;/code&gt; so that
packages edited with RStudio always use LF line endings, regardless of
platform. This reduces spurious changes when multiple people collaborate
on the same package.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;usethis.description&lt;/code&gt; option now lets you set &lt;code&gt;Authors@R = person()&lt;/code&gt;
directly. That is, you can make an actual call to &lt;code&gt;person()&lt;/code&gt; as opposed
to writing a &lt;em&gt;string&lt;/em&gt; that, when evaluated as code, returns a &lt;code&gt;person()&lt;/code&gt;.
This makes it less aggravating to detect and correct any mistakes. For
example, in my &lt;code&gt;.Rprofile&lt;/code&gt; I used to have:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;options&lt;/span&gt;(usethis.description &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;list&lt;/span&gt;(
  `Authors@R` &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;person(&amp;#34;Hadley&amp;#34;, &amp;#34;Wickham&amp;#34;, , &amp;#34;hadley@rstudio.com&amp;#34;, role = c(&amp;#34;aut&amp;#34;, &amp;#34;cre&amp;#34;))&amp;#39;&lt;/span&gt;
))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now I have:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;options&lt;/span&gt;(usethis.description &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;list&lt;/span&gt;(
  `Authors@R` &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; utils&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;person&lt;/span&gt;(
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Hadley&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Wickham&amp;#34;&lt;/span&gt;, , &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;hadley@rstudio.com&amp;#34;&lt;/span&gt;,
    role &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;aut&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;cre&amp;#34;&lt;/span&gt;)
  )
))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you can see from the syntax highlighting, it&amp;rsquo;s now much easier to see if
you&amp;rsquo;ve got all the quotes and commas in the right place. When you do this in
&lt;code&gt;.Rprofile&lt;/code&gt;, note that you &lt;strong&gt;must&lt;/strong&gt; call it as &lt;code&gt;utils::person()&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;contributing-to-packages-via-github-pull-requests&#34;&gt;Contributing to packages via GitHub pull requests&lt;/h2&gt;
&lt;p&gt;Based on our experiences at 
&lt;a href=&#34;https://www.tidyverse.org/blog/2019/11/tidyverse-dev-day-2020/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tidyverse developer day&lt;/a&gt;, we&amp;rsquo;ve tweaked the behaviour of usethis to ensure that new files have the same line ending as the rest of the project. We&amp;rsquo;ve also continued to polish our family of pull request helpers to work in more real-world situations. And, thanks to 
&lt;a href=&#34;http://www2.stat.duke.edu/~mc301/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mine Cetinkaya-Rundel&lt;/a&gt;, we now have an article that 
&lt;a href=&#34;https://usethis.r-lib.org/articles/articles/pr-functions.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;explains the overall workflow&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;thank-you&#34;&gt;Thank you!&lt;/h2&gt;
&lt;p&gt;A big thanks to all 103 contributors who helped make this release happen via their contributions on GitHub. 
&lt;a href=&#34;https://github.com/aaronpeikert&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@aaronpeikert&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/adelmofilho&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@adelmofilho&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/Ahobert&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@Ahobert&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/alandipert&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@alandipert&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/andrie&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@andrie&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/angela-li&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@angela-li&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/antoine-sachet&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@antoine-sachet&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/aosmith16&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@aosmith16&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/atusy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@atusy&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/avalcarcel9&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@avalcarcel9&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/barryrowlingson&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@barryrowlingson&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/batpigandme&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@batpigandme&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/boshek&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@boshek&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/cderv&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@cderv&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/Cervangirard&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@Cervangirard&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/chsafouane&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@chsafouane&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/coatless&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@coatless&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/ColinFay&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@ColinFay&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/CorradoLanera&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@CorradoLanera&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/csgillespie&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@csgillespie&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/cstepper&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@cstepper&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/davechilders&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@davechilders&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/davidchall&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@davidchall&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/DavisVaughan&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@DavisVaughan&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/dchiu911&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@dchiu911&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/dragosmg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@dragosmg&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/edgararuiz&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@edgararuiz&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/erindb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@erindb&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/espinielli&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@espinielli&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/fabian-s&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@fabian-s&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/fermumen&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@fermumen&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/florianm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@florianm&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/fmichonneau&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@fmichonneau&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/friep&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@friep&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/gaborcsardi&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@gaborcsardi&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/GegznaV&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@GegznaV&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/GregorDeCillia&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@GregorDeCillia&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/hadley&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@hadley&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/igordot&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@igordot&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/ijlyttle&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@ijlyttle&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/IndrajeetPatil&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@IndrajeetPatil&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/irenetlv&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@irenetlv&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/isteves&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@isteves&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/jdblischak&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@jdblischak&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/jennybc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@jennybc&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/jimhester&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@jimhester&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/jimmyg3g&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@jimmyg3g&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/jmgirard&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@jmgirard&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/JohnCoene&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@JohnCoene&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/jplecavalier&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@jplecavalier&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/jpritikin&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@jpritikin&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/jrosen48&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@jrosen48&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/jules32&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@jules32&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/jzadra&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@jzadra&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/karawoo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@karawoo&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/kevinushey&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@kevinushey&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/kiernann&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@kiernann&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/krlmlr&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@krlmlr&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/lettucehead&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@lettucehead&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/leungi&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@leungi&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/lionel-&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@lionel-&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/llrs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@llrs&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/lorenzwalthert&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@lorenzwalthert&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/maelle&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@maelle&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/MagdyLaban&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@MagdyLaban&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/malcolmbarrett&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@malcolmbarrett&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/Maschette&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@Maschette&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/matthijsvanderloos&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@matthijsvanderloos&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/maurolepore&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@maurolepore&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/maxheld83&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@maxheld83&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/MichaelChirico&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@MichaelChirico&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/mikmart&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@mikmart&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/MilesMcBain&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@MilesMcBain&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/mine-cetinkaya-rundel&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@mine-cetinkaya-rundel&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/mitchelloharawild&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@mitchelloharawild&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/muschellij2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@muschellij2&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/nandriychuk&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@nandriychuk&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/njtierney&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@njtierney&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/noamross&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@noamross&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/okhoma&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@okhoma&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/overdodactyl&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@overdodactyl&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/pachamaltese&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@pachamaltese&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/pat-s&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@pat-s&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/perezp44&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@perezp44&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/petrbouchal&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@petrbouchal&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/phargarten2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@phargarten2&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/pieterjanvc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@pieterjanvc&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/ramiromagno&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@ramiromagno&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/riccardoporreca&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@riccardoporreca&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/rich-iannone&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@rich-iannone&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/Robinlovelace&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@Robinlovelace&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/romainfrancois&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@romainfrancois&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/rossellhayes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@rossellhayes&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/rundel&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@rundel&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/ryapric&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@ryapric&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/slyrus&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@slyrus&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/smingerson&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@smingerson&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/smwindecker&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@smwindecker&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/strboul&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@strboul&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/timtrice&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@timtrice&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/TylerGrantSmith&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@TylerGrantSmith&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/VincentGuyader&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@VincentGuyader&lt;/a&gt;, and 
&lt;a href=&#34;https://github.com/wch&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@wch&lt;/a&gt;.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;This seems like a reasonable assumption given that ~80% of new CRAN packages use roxygen2. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>tibble 3.0.0</title>
      <link>/blog/2020/04/tibble-3-0-0/</link>
      <pubDate>Thu, 09 Apr 2020 00:00:00 +0000</pubDate>
      <guid>/blog/2020/04/tibble-3-0-0/</guid>
      <description>&lt;p&gt;Version 3.0.0 of the tibble package is on CRAN now. Tibbles are a modern reimagining of the data frame, keeping what time has shown to be effective, and throwing out what is not, with nicer default output too! Grab the latest version with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;install.packages&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;tibble&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Tibble now fully embraces vctrs, using it under the hood for its subsetting and subset assignment (&amp;ldquo;subassignment&amp;rdquo;) operations.
Accessing and updating rows and columns is now based on a rock-solid framework and works consistently for all types of columns, including list, data frame, and
matrix columns.
We believe that the changes will ultimately lead to better and safer code.&lt;/p&gt;
&lt;p&gt;This major release required quite some preparation, including a 
&lt;a href=&#34;https://tibble.tidyverse.org/articles/invariants.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;new vignette&lt;/a&gt; that describes the behavior of subsetting and subset assignment operations and the reasoning behind it.
For a complete overview please see the 
&lt;a href=&#34;https://tibble.tidyverse.org/news/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;release notes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In a nutshell: if an object is a vector, it can be part of a tibble.
My new 
&lt;a href=&#34;https://github.com/krlmlr/awesome-vctrs#readme&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Awesome vectors&lt;/a&gt; list aims at giving an overview of available implementations of vector types in R.
If you&amp;rsquo;re using a specialized class, or even implemented one, please file an issue in that repository or contribute an example.
For problems with tibble, use the 
&lt;a href=&#34;https://github.com/tidyverse/tibble/issues&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;issue tracker&lt;/a&gt; to report bugs or suggest ideas, your contributions are always welcome.&lt;/p&gt;
&lt;p&gt;The rest of the post is about the technical details of a tibble, and therefore mostly suited for interested R programmers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What can be part of a tibble?&lt;/li&gt;
&lt;li&gt;Size and length&lt;/li&gt;
&lt;li&gt;Sturdy recycling&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;what-can-be-part-of-a-tibble&#34;&gt;What can be part of a tibble?&lt;/h2&gt;
&lt;p&gt;Tibbles and data frames are collections of columns, where each column is a vector of the same size.
Neat.&lt;/p&gt;
&lt;p&gt;What is a vector?
What is its size?&lt;/p&gt;
&lt;p&gt;The new 
&lt;a href=&#34;https://vctrs.r-lib.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;vctrs package&lt;/a&gt; is dedicated to answering these surprisingly tricky questions.
Because this blog post describes many functions of this package, we load it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(vctrs)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The 
&lt;a href=&#34;https://vctrs.r-lib.org/reference/vec_assert.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;vec_is()&lt;/code&gt;&lt;/a&gt; function decides if an object is a vector.
This is important, because some objects are inherently scalar and cannot be added as a column to a data frame.&lt;/p&gt;
&lt;p&gt;Obviously, integers, characters, and other atomic objects (logical, numeric, complex, and raw) are vectors.
Environments, functions, and other &amp;ldquo;special&amp;rdquo; types of objects are clearly non-vectors.
Most objects that consist of an atomic type with a &lt;code&gt;&amp;quot;class&amp;quot;&lt;/code&gt; attribute are also vectors: examples are &lt;code&gt;POSIXct&lt;/code&gt; and 
&lt;a href=&#34;https://hms.tidyverse.org/reference/hms.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;hms::hms()&lt;/code&gt;&lt;/a&gt;.
Lists are harder because some lists are vectors and some are not.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;vec_is()&lt;/code&gt; function implements a heuristic that works automatically in most cases and adds a few special cases from base R.
By relying on &lt;code&gt;vec_is()&lt;/code&gt;, the &lt;code&gt;tibble()&lt;/code&gt; function and others can give an early error if used with an inherent scalar:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(tibble)
model &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;lm&lt;/span&gt;(y &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; x, &lt;span style=&#34;color:#00f&#34;&gt;data.frame&lt;/span&gt;(x &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;, y &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;), model &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FALSE&lt;/span&gt;)
&lt;span style=&#34;color:#00f&#34;&gt;tibble&lt;/span&gt;(model)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Error: All columns in a tibble must be vectors.&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; x Column `model` is a `lm` object.&lt;/span&gt;
time &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;Sys.time&lt;/span&gt;()
&lt;span style=&#34;color:#00f&#34;&gt;tibble&lt;/span&gt;(time)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 1 x 1&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   time               &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;dttm&amp;gt;             &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 2020-04-09 20:38:28&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The new 
&lt;a href=&#34;https://tibble.tidyverse.org/reference/tibble.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;tibble_row()&lt;/code&gt;&lt;/a&gt; function reverses this: inherent scalars are wrapped in lists:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;tibble_row&lt;/span&gt;(model)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 1 x 1&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   model &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;list&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 &amp;lt;lm&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#00f&#34;&gt;tibble_row&lt;/span&gt;(time)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 1 x 1&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   time               &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;dttm&amp;gt;             &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 2020-04-09 20:38:28&lt;/span&gt;
&lt;span style=&#34;color:#00f&#34;&gt;tibble_row&lt;/span&gt;(time &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;rep&lt;/span&gt;(time, &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;))
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Error: All vectors must be size one, use `list()` to wrap.&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; x Column `time` is of size 2.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you have implemented a vector class, double-check that 
&lt;a href=&#34;https://vctrs.r-lib.org/reference/vec_assert.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;vec_is()&lt;/code&gt;&lt;/a&gt; returns &lt;code&gt;TRUE&lt;/code&gt; for your objects.
Please also add it to my 
&lt;a href=&#34;https://github.com/krlmlr/awesome-vctrs#readme&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Awesome vectors&lt;/a&gt; list, or file an issue.&lt;/p&gt;
&lt;h2 id=&#34;size-and-length&#34;&gt;Size and length&lt;/h2&gt;
&lt;p&gt;Data frames and matrices are also recognized vectors, and can be part of a tibble:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;df &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;data.frame&lt;/span&gt;(a &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;, b &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;)
m &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;matrix&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt;, ncol &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;)

&lt;span style=&#34;color:#00f&#34;&gt;vec_is&lt;/span&gt;(df)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] TRUE&lt;/span&gt;
&lt;span style=&#34;color:#00f&#34;&gt;vec_is&lt;/span&gt;(m)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] TRUE&lt;/span&gt;
&lt;span style=&#34;color:#00f&#34;&gt;tibble&lt;/span&gt;(packed &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; df)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 3 x 1&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   packed$a    $b&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;      &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1        1     2&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2        2     3&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3        3     4&lt;/span&gt;
&lt;span style=&#34;color:#00f&#34;&gt;tibble&lt;/span&gt;(m)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 2 x 1&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   m[,1]  [,2]  [,3]&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1     1     3     5&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2     2     4     6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &amp;ldquo;elements&amp;rdquo; of a data frame or matrix are its rows.
All subsetting and subassignment operations now use 
&lt;a href=&#34;https://vctrs.r-lib.org/reference/vec_slice.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;vec_slice()&lt;/code&gt;&lt;/a&gt; under the hood.
Contrary to &lt;code&gt;[&lt;/code&gt;, slicing will work along the rows for matrices and data frames.&lt;/p&gt;
&lt;p&gt;For these and a few types, length and size are different: the length refers to the size of the internal data format, whereas the size is the number of elements.
The 
&lt;a href=&#34;https://vctrs.r-lib.org/reference/vec_size.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;vec_size()&lt;/code&gt;&lt;/a&gt; function, modeled after &lt;code&gt;NROW()&lt;/code&gt;, returns the latter:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;vec_size&lt;/span&gt;(df)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 3&lt;/span&gt;
&lt;span style=&#34;color:#00f&#34;&gt;length&lt;/span&gt;(df)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 2&lt;/span&gt;

&lt;span style=&#34;color:#00f&#34;&gt;vec_size&lt;/span&gt;(m)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 2&lt;/span&gt;
&lt;span style=&#34;color:#00f&#34;&gt;length&lt;/span&gt;(m)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For your own code, it is almost always safer to use &lt;code&gt;vec_size()&lt;/code&gt; instead of &lt;code&gt;length()&lt;/code&gt;.
Use &lt;code&gt;ncol()&lt;/code&gt; to count the columns in a data frame.&lt;/p&gt;
&lt;h2 id=&#34;sturdy-recycling&#34;&gt;Sturdy recycling&lt;/h2&gt;
&lt;p&gt;We always recycled only vectors of size one in &lt;code&gt;tibble()&lt;/code&gt; and &lt;code&gt;as_tibble()&lt;/code&gt;.
This now also applies to subassignment.
We believe that most of the time this is an unintended error.
Please use an explicit &lt;code&gt;rep()&lt;/code&gt; or &lt;code&gt;rep_len()&lt;/code&gt; if you really need to create a column that consists of multiple repetitions of a vector.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;x &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;tibble&lt;/span&gt;(a &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;)
x&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;a &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Error: Assigned data `1:2` must be compatible with existing data.&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; x Existing data has 4 rows.&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; x Assigned data has 2 rows.&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ℹ Only vectors of size 1 are recycled.&lt;/span&gt;
x&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;a &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;rep&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;)
x
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 4 x 1&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;       a&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;int&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1     1&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2     2&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3     1&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4     2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Related errors may also appear when applying a pattern that works with regular data frames:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;x &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;data.frame&lt;/span&gt;(a &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, b &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;)
x[1, ] &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(a &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;, b &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;)
x
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   a b&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 3 4&lt;/span&gt;

x &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;tibble&lt;/span&gt;(a &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, b &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;)
x[1, ] &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(a &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;, b &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Error: Assigned data `c(a = 3, b = 4)` must be compatible with row subscript `1`.&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; x 1 row must be assigned.&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; x Assigned data has 2 rows.&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ℹ Row updates require a list value. Do you need `list()` or `as.list()`?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is because all vectors on the right-hand side are treated as columnar data.
Convert to a list to treat the input as row data:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;x[1, ] &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;list&lt;/span&gt;(a &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;, b &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;)
x
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 1 x 2&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;       a     b&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1     3     4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The ambiguity between a row vector and a column vector also affects the &lt;code&gt;as_tibble()&lt;/code&gt; function.
For this reason, it is now superseded for atomic and list inputs.
In new code, use the new 
&lt;a href=&#34;https://tibble.tidyverse.org/reference/as_tibble.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;as_tibble_row()&lt;/code&gt; and &lt;code&gt;as_tibble_col()&lt;/code&gt;&lt;/a&gt; functions to clarify intent.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;as_tibble_row&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(a &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;, b &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;))
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 1 x 2&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;       a     b&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1     3     4&lt;/span&gt;
&lt;span style=&#34;color:#00f&#34;&gt;as_tibble_col&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(a &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;, b &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;))
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 2 x 1&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   value&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1     3&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2     4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;acknowledgments&#34;&gt;Acknowledgments&lt;/h2&gt;
&lt;p&gt;Due to the nature of the changes, about 60 CRAN packages were failing with our release candidate.
Many thanks to the maintainers of downstream packages who were very helpful in making this upgrade a smooth experience.&lt;/p&gt;
&lt;p&gt;Thanks to the following contributors who sent issues, pull requests, and comments since tibble 2.1.3:&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/adamdsmith&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@adamdsmith&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/alankjackson&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@alankjackson&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/anabbott&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@anabbott&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/batpigandme&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@batpigandme&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/billdenney&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@billdenney&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/borisleto&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@borisleto&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/Breza&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@Breza&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/Cervangirard&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@Cervangirard&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/courtiol&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@courtiol&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/dan-reznik&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@dan-reznik&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/daviddalpiaz&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@daviddalpiaz&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/DavisVaughan&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@DavisVaughan&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/elinw&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@elinw&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/EmilHvitfeldt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@EmilHvitfeldt&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/eran3006&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@eran3006&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/frederikziebell&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@frederikziebell&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/gavinsimpson&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@gavinsimpson&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/gdequeiroz&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@gdequeiroz&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/guiastrennec&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@guiastrennec&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/hadley&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@hadley&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/HashRocketSyntax&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@HashRocketSyntax&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/hope-data-science&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@hope-data-science&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/jennybc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@jennybc&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/jmgirard&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@jmgirard&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/kevinwolz&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@kevinwolz&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/kieranjmartin&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@kieranjmartin&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/lionel-&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@lionel-&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/LudvigOlsen&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@LudvigOlsen&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/mabafaba&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@mabafaba&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/matteodefelice&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@matteodefelice&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/MatthieuStigler&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@MatthieuStigler&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/md0u80c9&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@md0u80c9&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/michaelquinn32&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@michaelquinn32&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/mitchelloharawild&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@mitchelloharawild&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/moodymudskipper&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@moodymudskipper&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/msberends&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@msberends&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/pavopax&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@pavopax&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/rbjanis&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@rbjanis&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/romainfrancois&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@romainfrancois&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/rvg02010&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@rvg02010&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/sfirke&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@sfirke&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/Shians&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@Shians&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/ShixiangWang&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@ShixiangWang&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/stephensrmmartin&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@stephensrmmartin&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/stufield&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@stufield&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/Tazinho&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@Tazinho&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/TimTeaFan&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@TimTeaFan&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/tyluRp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@tyluRp&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/wgrundlingh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@wgrundlingh&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/xvrdm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@xvrdm&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/yannabraham&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@yannabraham&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/ycroissant&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@ycroissant&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/yogat3ch&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@yogat3ch&lt;/a&gt;, and 
&lt;a href=&#34;https://github.com/yutannihilation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@yutannihilation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Your contributions are very valuable and important to us!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>pkgdown 1.5.0</title>
      <link>/blog/2020/03/pkgdown-1-5-0/</link>
      <pubDate>Wed, 25 Mar 2020 00:00:00 +0000</pubDate>
      <guid>/blog/2020/03/pkgdown-1-5-0/</guid>
      <description>&lt;p&gt;We&amp;rsquo;re well chuffed to announce that 
&lt;a href=&#34;https://pkgdown.r-lib.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pkgdown&lt;/a&gt; 1.5.0 is now available on CRAN. pkgdown is designed to make it quick and easy to build a website for your package. Install it with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;install.packages&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;pkgdown&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The most important changes are highlighted below and you can see a full list of changes in the 
&lt;a href=&#34;https://pkgdown.r-lib.org/news/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;changelog&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;articles&#34;&gt;Articles&lt;/h2&gt;
&lt;p&gt;For packages with many vignettes/articles, we&amp;rsquo;ve provided much greater control over the 
&lt;a href=&#34;https://pkgdown.r-lib.org/articles&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;articles index&lt;/a&gt; and navbar. There are two major new features in this release:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The articles index page now displays article &lt;code&gt;description&lt;/code&gt;s, taken from
YAML metadata in the header of each article. This lets you provide
more context for each article.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The articles navbar is now controlled by the &lt;code&gt;articles&lt;/code&gt; section in
&lt;code&gt;_pkgdown.yml&lt;/code&gt;. The ordering of the sections, and articles within
them, control the order of the articles in the navbar, and you can
use the new &lt;code&gt;navbar&lt;/code&gt; field to control whether or not each section
appears in the navbar.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Learn more about both of these features in 
&lt;a href=&#34;https://pkgdown.r-lib.org/reference/build_articles.html#index-and-navbar&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;?&lt;code&gt;build_articles&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks to 
&lt;a href=&#34;https://github.com/gadenbuie&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Garrick Aden-Buie&lt;/a&gt;, you also get much richer control over Open Graph and Twitter metadata for individual articles. See new 
&lt;a href=&#34;https://pkgdown.r-lib.org/articles/metadata.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;vignette(&amp;quot;metadata&amp;quot;)&lt;/code&gt;&lt;/a&gt; for details.&lt;/p&gt;
&lt;h2 id=&#34;reference-index&#34;&gt;Reference index&lt;/h2&gt;
&lt;p&gt;For packages with many documentation topics, you can add an additional layer of hierarchy to the reference index, using the new &lt;code&gt;subtitle&lt;/code&gt; field. To give you some sense for what that might look like, here&amp;rsquo;s an example for a partial (and imaginary) dplyr reference index:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;references&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;- &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;title&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Data&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;manipulation&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;- &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;subtitle&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;One&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;table&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;- &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;contents&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;- arrange&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;- filter&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;- mutate&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;- &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;subtitle&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;two&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;table&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;- &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;contents&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;- ends_with(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;_join&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;- &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;title&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Datasets&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;- &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;contents&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; 
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;- has_keyword(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;datasets&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;tables-of-contents&#34;&gt;Tables of contents&lt;/h2&gt;
&lt;p&gt;Sidebar tables of contents now use 
&lt;a href=&#34;https://afeld.github.io/bootstrap-toc/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;bootstrap-toc&lt;/a&gt;, which considerably improves navigation for long articles and reference pages.&lt;/p&gt;
&lt;h2 id=&#34;other-source-repositories&#34;&gt;Other source repositories&lt;/h2&gt;
&lt;p&gt;You can now control the links to source files (in reference pages and articles) and issues and users (in the NEWS) with new the &lt;code&gt;repo$url&lt;/code&gt; config parameter. This makes it easier to use pkgdown with GitHub enterprise, packages in subdirectories, and other source hosts (like bitbucket).&lt;/p&gt;
&lt;p&gt;The YAML looks something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;repo&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;url&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;home&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;https://github.com/r-lib/pkgdown/&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;source&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;https://github.com/r-lib/pkgdown/blob/master/&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;issue&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;https://github.com/r-lib/pkgdown/issues/&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;user&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;https://github.com/&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The individual components (e.g. path, issue number, username) are pasted on the end of these urls so they should have trailing &lt;code&gt;/&lt;/code&gt;s.&lt;/p&gt;
&lt;p&gt;pkgdown now detects GitLab urls automatically (since they use the same structure as GitHub), so you don&amp;rsquo;t need to set these links if you package is hosted on GitLab, and you&amp;rsquo;ve included a link to your source repo in the &lt;code&gt;URL&lt;/code&gt; or &lt;code&gt;BugReports&lt;/code&gt; &lt;code&gt;DESCRIPTION&lt;/code&gt; fields.&lt;/p&gt;
&lt;h2 id=&#34;acknowledgements&#34;&gt;Acknowledgements&lt;/h2&gt;
&lt;p&gt;A big thank you goes to 
&lt;a href=&#34;https://github.com/jayhesselberth&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@jayhesselberth&lt;/a&gt; (the co-maintainer of pkgdown), and to to the 61 other people who helped make this release possible:

&lt;a href=&#34;https://github.com/AshesITR&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@AshesITR&lt;/a&gt;,  
&lt;a href=&#34;https://github.com/baptiste&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@baptiste&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/Bisaloo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@Bisaloo&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/carloscinelli&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@carloscinelli&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/cboettig&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@cboettig&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/coatless&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@coatless&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/coolbutuseless&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@coolbutuseless&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/DanielEWeeks&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@DanielEWeeks&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/davidchall&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@davidchall&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/DavorJ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@DavorJ&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/dimagor&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@dimagor&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/erikcs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@erikcs&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/ferroao&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@ferroao&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/floriandeboissieu&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@floriandeboissieu&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/flying-sheep&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@flying-sheep&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/fmichonneau&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@fmichonneau&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/fmmattioni&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@fmmattioni&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/gaborcsardi&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@gaborcsardi&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/genomaths&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@genomaths&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/gustavdelius&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@gustavdelius&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/hadley&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@hadley&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/hbaniecki&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@hbaniecki&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/ijlyttle&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@ijlyttle&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/IndrajeetPatil&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@IndrajeetPatil&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/jangorecki&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@jangorecki&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/jayhesselberth&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@jayhesselberth&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/jeffwong-nflx&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@jeffwong-nflx&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/jennybc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@jennybc&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/jeroen&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@jeroen&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/jimhester&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@jimhester&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/JoshuaSturm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@JoshuaSturm&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/jranke&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@jranke&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/kevinushey&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@kevinushey&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/kevinwang09&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@kevinwang09&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/krlmlr&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@krlmlr&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/lbusett&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@lbusett&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/lcolladotor&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@lcolladotor&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/lgatto&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@lgatto&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/lindeloev&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@lindeloev&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/lionel-&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@lionel-&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/lorenzwalthert&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@lorenzwalthert&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/m-l-1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@m-l-1&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/maelle&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@maelle&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/mattmalin&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@mattmalin&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/meghapsimatrix&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@meghapsimatrix&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/mikldk&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@mikldk&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/mllg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@mllg&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/ms609&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@ms609&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/nealrichardson&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@nealrichardson&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/nschiett&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@nschiett&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/nteetor&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@nteetor&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/pat-s&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@pat-s&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/peterdesmet&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@peterdesmet&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/rupertoverall&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@rupertoverall&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/schloerke&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@schloerke&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/slowkow&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@slowkow&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/t-kalinowski&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@t-kalinowski&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/wendtke&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@wendtke&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/ycphs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@ycphs&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/yiluheihei&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@yiluheihei&lt;/a&gt;, and 
&lt;a href=&#34;https://github.com/yonicd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@yonicd&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>roxygen2 7.1.0</title>
      <link>/blog/2020/03/roxygen2-7-1-0/</link>
      <pubDate>Wed, 11 Mar 2020 00:00:00 +0000</pubDate>
      <guid>/blog/2020/03/roxygen2-7-1-0/</guid>
      <description>&lt;p&gt;We&amp;rsquo;re chuffed to announce the release of 
&lt;a href=&#34;https://roxygen2.r-lib.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;roxygen2 7.1.0&lt;/a&gt;.
roxygen2 allows you to write specially formatted R comments that generate R documentation files (&lt;code&gt;man/*.Rd&lt;/code&gt;) and the &lt;code&gt;NAMESPACE&lt;/code&gt; file.
roxygen2 is used by over 8,800 CRAN packages.&lt;/p&gt;
&lt;p&gt;Install the latest version of roxygen2 with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;install.packages&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;roxygen2&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is a minor release, with many small improvements and bug fixes, and some new features.
This blog post discusses the most important changes. See the 
&lt;a href=&#34;https://roxygen2.r-lib.org/news/index.html#roxygen2-7-1-0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;full changelog&lt;/a&gt; for all changes.&lt;/p&gt;
&lt;h2 id=&#34;roxygen2-meets-knitr&#34;&gt;roxygen2 meets knitr&lt;/h2&gt;
&lt;p&gt;We have been gradually improving roxygen2&amp;rsquo;s markdown support, and this release has an exciting new markdown feature as well.
Starting from roxygen2 7.1.0 you can write inline R code and markdown code fences directly in roxygen2 comments!
roxygen2 runs the R code and inserts its output into the documentation.&lt;/p&gt;
&lt;h3 id=&#34;inline-r-code&#34;&gt;Inline R code&lt;/h3&gt;
&lt;p&gt;For running R code inline, use the usual markdown backticks, and prefix the code with &lt;code&gt;r&lt;/code&gt; and a space character.
roxygen2 interprets the rest of the text within backticks as R code, evaluates it, and replaces the backtick expression with its value.
After all such substitutions, the text of the whole tag is interpreted as markdown, as usual.&lt;/p&gt;
&lt;p&gt;For example, the following code inserts the date and the R version of the roxygen2 run.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;#39; roxygen2 created this manual page on `r Sys.Date()` using R version&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;#39; `r getRversion()`.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;code-blocks-fences&#34;&gt;Code blocks (fences)&lt;/h3&gt;
&lt;p&gt;Markdown code blocks can be dynamic as well, if you use &lt;code&gt;```{r}&lt;/code&gt; to start them, just like in knitr documents.
roxygen evaluates the code, and (by default) both the code and the printed value of the expression will be inserted into the manual page.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;#39; ```{r}&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;#39; # This block of code will be evaluated&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;#39; summary(iris)&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;#39; ```&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Code blocks support knitr chunk options, e.g. to keep the output of several expressions together, you can specify &lt;code&gt;results= &amp;quot;hold&amp;quot;&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;#39; ```{r results = &amp;#34;hold&amp;#34;}&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;#39; names(mtcars)&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;#39; nrow(mtcars)&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;#39; ```&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;By default plots create &lt;code&gt;.png&lt;/code&gt; files in the &lt;code&gt;man/figures&lt;/code&gt; directory. The file names are created from the chunk names:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;#39; ```{r r-cookbook-barplot}&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;#39; # https://r-graphics.org/recipe-distribution-basic-hist&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;#39; library(ggplot2)&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;#39; ggplot(faithful, aes(x = waiting)) +&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;#39;   geom_histogram()&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;#39; ```&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Both the inline R code and the markdown code fences are evaluated when you run &lt;code&gt;devtools::document()&lt;/code&gt; (or &lt;code&gt;roxygenize()&lt;/code&gt;).
You probably want to avoid lengthy computations, or set up caching to keep your package development workflow snappy.&lt;/p&gt;
&lt;p&gt;Please see &lt;code&gt;vignette(&amp;quot;rd-formatting&amp;quot;)&lt;/code&gt; for more about dynamic documentation, including potential caveats.&lt;/p&gt;
&lt;h2 id=&#34;line-ending-conversion&#34;&gt;Line ending conversion&lt;/h2&gt;
&lt;p&gt;This version of roxygen2 does a much better job at keeping the line ending characters consistent within each file, across operating systems.
In particular, if a generated file has only Windows (CR LF) line endings, roxygen2 keeps the file that way.
If a file has mixed Windows and Unix (LF) line endings, roxygen2 converts all line endings to Unix (LF).
For new files roxygen2 uses LF file endings.
If you want to convert a file from CR LF line endings to LF, simply remove it and let roxygen2 re-create it.&lt;/p&gt;
&lt;p&gt;The new convention works better with git on Windows.
Windows git, depending on configuration, might or might not convert between CR LF and LF line endings when checking out and when committing code.
No matter which git option you use, roxygen2 now does not introduce spurious line ending changes.&lt;/p&gt;
&lt;p&gt;Thanks to 
&lt;a href=&#34;https://github.com/jonthegeek&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@jonthegeek&lt;/a&gt; and 
&lt;a href=&#34;https://github.com/jimhester&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@jimhester&lt;/a&gt; for working on this feature.&lt;/p&gt;
&lt;h2 id=&#34;some-other-improvements&#34;&gt;Some other improvements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Hyperlinks to R6 methods are also added in the PDF manual.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@description NULL&lt;/code&gt; and &lt;code&gt;@details NULL&lt;/code&gt; no longer fail; instead, these tags
are ignored, except for &lt;code&gt;@description NULL&lt;/code&gt; in package level documentation,
where it can be used to suppress the auto-generated &amp;lsquo;Description&amp;rsquo; section.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Multiple &lt;code&gt;@format&lt;/code&gt; tags are now combined.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@evalNamespace()&lt;/code&gt; works again.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;acknowledgements&#34;&gt;Acknowledgements&lt;/h2&gt;
&lt;p&gt;A big thanks to all 40 contributors who helped make this release possible! 
&lt;a href=&#34;https://github.com/alandipert&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@alandipert&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/allenzhuaz&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@allenzhuaz&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/BenEngbers&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@BenEngbers&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/bgctw&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@bgctw&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/billdenney&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@billdenney&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/Bisaloo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@Bisaloo&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/cboettig&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@cboettig&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/dmurdoch&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@dmurdoch&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/dragosmg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@dragosmg&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/eddelbuettel&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@eddelbuettel&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/gaborcsardi&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@gaborcsardi&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/genomaths&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@genomaths&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/goldingn&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@goldingn&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/hadley&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@hadley&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/HenrikBengtsson&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@HenrikBengtsson&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/Hong-Revo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@Hong-Revo&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/hughjonesd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@hughjonesd&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/iferres&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@iferres&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/IndrajeetPatil&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@IndrajeetPatil&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/jameslamb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@jameslamb&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/jimhester&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@jimhester&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/kingaa&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@kingaa&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/kortschak&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@kortschak&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/krlmlr&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@krlmlr&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/maelle&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@maelle&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/michaelquinn32&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@michaelquinn32&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/mikemahoney218&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@mikemahoney218&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/mstr3336&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@mstr3336&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/muschellij2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@muschellij2&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/nteetor&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@nteetor&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/ntguardian&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@ntguardian&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/pat-s&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@pat-s&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/RaphaelS1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@RaphaelS1&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/russHyde&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@russHyde&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/s-fleck&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@s-fleck&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/stefanfritsch&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@stefanfritsch&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/strboul&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@strboul&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/TomKellyGenetics&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@TomKellyGenetics&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/VPetukhov&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@VPetukhov&lt;/a&gt;, and 
&lt;a href=&#34;https://github.com/zachary-foster&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@zachary-foster&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>themis 0.1.0</title>
      <link>/blog/2020/02/themis-0-1-0/</link>
      <pubDate>Tue, 11 Feb 2020 00:00:00 +0000</pubDate>
      <guid>/blog/2020/02/themis-0-1-0/</guid>
      <description>&lt;p&gt;We&amp;rsquo;re chuffed to announce the release of 
&lt;a href=&#34;https://github.com/tidymodels/themis&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;themis&lt;/a&gt; on CRAN. 
&lt;a href=&#34;https://tidymodels.github.io/themis/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;themis&lt;/a&gt; implements a collection of new steps for the 
&lt;a href=&#34;https://github.com/tidymodels/recipes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;recipes&lt;/a&gt; package to deal with unbalanced data. themis is still in early development so any and all feedback is highly appreciated.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(modeldata)
&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(recipes)
&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(themis)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In a classification context, a dataset is said to be unbalanced if there is an unequal number of observations in each class. Many models perform best when the number of observations is equal and, thus, tend to struggle with unbalanced data.&lt;/p&gt;
&lt;p&gt;The steps in this package can be divided into two camps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ones that remove observations from the majority class(es), and&lt;/li&gt;
&lt;li&gt;Ones that add observations to the minority class(es).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can do more than one action, and, thus, are able to mix and match by for example first removing observations from the majority class followed by adding observations to the minority class to achieve the balance you want.&lt;/p&gt;
&lt;h2 id=&#34;hybrid-sampling-steps&#34;&gt;Hybrid-sampling steps&lt;/h2&gt;
&lt;p&gt;Hybrid-sampling involves adding observations to the minority class. This can be done in multiple ways, one way is to sample existing data points like &lt;code&gt;step_upsample()&lt;/code&gt; does, another way is to synthetically generate new points based on existing points, &lt;code&gt;step_smote()&lt;/code&gt; and related steps uses k nearest neighbor information to generate new points. Currently &lt;code&gt;step_upsample()&lt;/code&gt;, &lt;code&gt;step_smote()&lt;/code&gt;, &lt;code&gt;step_bsmote()&lt;/code&gt;, &lt;code&gt;step_adasyn()&lt;/code&gt;, and &lt;code&gt;step_rose()&lt;/code&gt; are available. All steps have references in their respective help pages. They have slightly different requirements according to the data they can handle; most need all numeric with no missing data, but those requirements can and should be handled by previous steps.&lt;/p&gt;
&lt;p&gt;In the following example, let&amp;rsquo;s look at the &lt;code&gt;okc&lt;/code&gt; dataset. and we can see that the imbalance is 1-to-6.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;data&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;okc&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#00f&#34;&gt;table&lt;/span&gt;(okc&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;Class)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  stem other &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9539 50316&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We will use &lt;code&gt;age&lt;/code&gt;, &lt;code&gt;diet&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; in modeling to predict &lt;code&gt;Class&lt;/code&gt;. Since &lt;code&gt;diet&lt;/code&gt; is a factor, we first need to dummify it before we normalize and perform mean imputation to handle all the missing data.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;rec &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;recipe&lt;/span&gt;(Class &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; age &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; diet &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; height, data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; okc) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;step_unknown&lt;/span&gt;(diet) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;step_dummy&lt;/span&gt;(diet) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;step_normalize&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;all_predictors&lt;/span&gt;()) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;step_meanimpute&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;all_predictors&lt;/span&gt;()) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;step_smote&lt;/span&gt;(Class) 

rec &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;prep&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;juice&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;pull&lt;/span&gt;(Class) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;table&lt;/span&gt;()
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; .&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  stem other &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 50316 50316&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And we see that the resulting dataset has a perfectly even distribution. All the hybrid-sampling steps share the parameter &lt;code&gt;over_ratio&lt;/code&gt;, which specifies the desired ratio between the biggest class and the smallest class. It defaults to 1 for an even distribution but can be set to something like &lt;code&gt;0.5&lt;/code&gt; to have the minority class become half the size of the majority class.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;rec &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;recipe&lt;/span&gt;(Class &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; age &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; diet &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; height, data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; okc) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;step_unknown&lt;/span&gt;(diet) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;step_dummy&lt;/span&gt;(diet) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;step_normalize&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;all_predictors&lt;/span&gt;()) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;step_meanimpute&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;all_predictors&lt;/span&gt;()) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;step_smote&lt;/span&gt;(Class, over_ratio &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0.5&lt;/span&gt;) 

rec &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;prep&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;juice&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;pull&lt;/span&gt;(Class) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;table&lt;/span&gt;()
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; .&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  stem other &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 25158 50316&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;under-sampling-steps&#34;&gt;Under-sampling steps&lt;/h2&gt;
&lt;p&gt;Under-sampling is removing observations from the majority class. Currently &lt;code&gt;step_downsample()&lt;/code&gt;, &lt;code&gt;step_nearmiss()&lt;/code&gt; and &lt;code&gt;step_tomek()&lt;/code&gt; are available. These steps should have the same user experience as the previous steps as they have a similar shared parameter &lt;code&gt;under_ratio&lt;/code&gt; which is the ratio between the smallest and the biggest class. Simply using &lt;code&gt;step_downsample()&lt;/code&gt; randomly removes samples in the majority classes to get them to be the same size as the smallest class.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;rec &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;recipe&lt;/span&gt;(Class &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; age &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; diet &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; height, data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; okc) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;step_unknown&lt;/span&gt;(diet) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;step_dummy&lt;/span&gt;(diet) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;step_normalize&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;all_predictors&lt;/span&gt;()) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;step_meanimpute&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;all_predictors&lt;/span&gt;()) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;step_downsample&lt;/span&gt;(Class) 

rec &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;prep&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;juice&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;pull&lt;/span&gt;(Class) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;table&lt;/span&gt;()
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; .&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  stem other &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9539  9539&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>slider 0.1.0</title>
      <link>/blog/2020/02/slider-0-1-0/</link>
      <pubDate>Mon, 10 Feb 2020 00:00:00 +0000</pubDate>
      <guid>/blog/2020/02/slider-0-1-0/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m thrilled to announce that the first version of 
&lt;a href=&#34;https://davisvaughan.github.io/slider/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;slider&lt;/a&gt; is now available on CRAN!&lt;/p&gt;
&lt;p&gt;slider provides a family of general purpose sliding window functions, which can be used to compute moving averages, cumulatives sums, rolling regressions, and any other sliding operation.&lt;/p&gt;
&lt;p&gt;This package is a combination of ideas from a variety of sources, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://purrr.tidyverse.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;purrr&lt;/a&gt; for the overall package API&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.postgresql.org/docs/9.1/sql-expressions.html#SYNTAX-WINDOW-FUNCTIONS&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SQL&amp;rsquo;s window functions&lt;/a&gt; for the argument API&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/tidyverts/tsibble&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Earo Wang&amp;rsquo;s &lt;code&gt;tsibble::slide()&lt;/code&gt;&lt;/a&gt; for the function names&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://rdatatable.gitlab.io/data.table/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;data.table&amp;rsquo;s non-equi joins&lt;/a&gt; for inspiration on how &lt;code&gt;slide_index()&lt;/code&gt; should work&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Install slider with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;install.packages&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;slider&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This blog post summarizes the three key functions in slider: &lt;code&gt;slide()&lt;/code&gt;, &lt;code&gt;slide_index()&lt;/code&gt;, and &lt;code&gt;slide_period()&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(slider)
&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(tibble)
&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(purrr)
&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(lubridate, warn.conflicts &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FALSE&lt;/span&gt;)
&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(dplyr, warn.conflicts &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FALSE&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;sliding&#34;&gt;Sliding&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;purrr::map()&lt;/code&gt; allows you to iterate over a vector one element at a time and apply a function to each element. &lt;code&gt;slide()&lt;/code&gt; takes that concept and generalizes it so that you can iterate over &lt;em&gt;sliding windows&lt;/em&gt; of a vector, applying any function that you want to each window. To start exploring this idea, note that the defaults of &lt;code&gt;slide()&lt;/code&gt; are essentially identical to &lt;code&gt;map()&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# A vector of sales data for our business&lt;/span&gt;
sales_vec &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;)

&lt;span style=&#34;color:#00f&#34;&gt;slide&lt;/span&gt;(sales_vec, &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt;.x)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [[1]]&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 2&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [[2]]&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 4&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [[3]]&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 3&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [[4]]&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Things get more interesting when you consider the additional arguments to &lt;code&gt;slide()&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;.before&lt;/code&gt;: How many elements &lt;em&gt;before&lt;/em&gt; the current one should be included in the window?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;.after&lt;/code&gt;: How many elements &lt;em&gt;after&lt;/em&gt; the current one should be included in the window?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;.complete&lt;/code&gt;: Should &lt;code&gt;.f&lt;/code&gt; only be evaluated when there is enough data to make a complete window?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;.step&lt;/code&gt;: The number of elements to shift forward between calls to &lt;code&gt;.f&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By setting &lt;code&gt;.before = 1&lt;/code&gt; we can construct moving windows along &lt;code&gt;.x&lt;/code&gt;, adding the current element and the one before it into the window.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;slide&lt;/span&gt;(sales_vec, &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt;.x, .before &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [[1]]&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 2&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [[2]]&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 2 4&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [[3]]&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 4 3&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [[4]]&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 3 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice how in the first result our slice just has one element. This is an &lt;em&gt;incomplete&lt;/em&gt; window because it isn&amp;rsquo;t possible to look one element before the first element. By default, &lt;code&gt;slide()&lt;/code&gt; computes &lt;code&gt;.f&lt;/code&gt; on incomplete windows, but you can force it to only be computed on complete windows with &lt;code&gt;.complete&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;slide&lt;/span&gt;(sales_vec, &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt;.x, .before &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, .complete &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [[1]]&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; NULL&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [[2]]&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 2 4&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [[3]]&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 4 3&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [[4]]&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 3 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The API of slider is intentionally very similar to purrr. &lt;code&gt;slide()&lt;/code&gt; always returns a list (like &lt;code&gt;map()&lt;/code&gt;), and the size of the result is always the same size as the input. As you might have guessed, there are also suffixed versions available to return more specific output. Say we want to compute a 2-value moving average from our sales. We might use:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;slide_dbl&lt;/span&gt;(sales_vec, mean, .before &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 2.0 3.0 3.5 4.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There is also a new suffix, &lt;code&gt;*_vec()&lt;/code&gt;, which attempts to automatically simplify the results using the type rules provided by 
&lt;a href=&#34;https://vctrs.r-lib.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;vctrs&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;slide_vec&lt;/span&gt;(sales_vec, mean, .before &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 2.0 3.0 3.5 4.0&lt;/span&gt;

&lt;span style=&#34;color:#00f&#34;&gt;slide_vec&lt;/span&gt;(sales_vec, &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;mean&lt;/span&gt;(.x) &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;, .before &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] FALSE FALSE  TRUE  TRUE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Lastly, the one big difference between how &lt;code&gt;slide()&lt;/code&gt; and &lt;code&gt;map()&lt;/code&gt; iterate over vectors is how they treat data frames. To &lt;code&gt;map()&lt;/code&gt;, a data frame is a vector of columns, to &lt;code&gt;slide()&lt;/code&gt; it is a 
&lt;a href=&#34;https://blog.davisvaughan.com/2019/10/16/data-frames-as-vectors-of-rows/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;vector of rows&lt;/a&gt;. In a way, this makes &lt;code&gt;slide()&lt;/code&gt; a generic row-wise iterator over data frames.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;index_vec &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;as.Date&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;2019-08-29&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt;)
wday_vec &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;as.character&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;wday&lt;/span&gt;(index_vec, label &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;))

company &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;tibble&lt;/span&gt;(
  sales &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; sales_vec,
  index &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; index_vec,
  wday &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; wday_vec
)

company
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 4 x 3&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   sales index      wday &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;     &amp;lt;chr&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1     2 2019-08-29 Thu  &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2     4 2019-08-30 Fri  &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3     3 2019-09-03 Tue  &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4     5 2019-09-04 Wed&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Over columns:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;map&lt;/span&gt;(company, &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt;.x)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $sales&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 2 4 3 5&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $index&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] &amp;#34;2019-08-29&amp;#34; &amp;#34;2019-08-30&amp;#34; &amp;#34;2019-09-03&amp;#34; &amp;#34;2019-09-04&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $wday&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] &amp;#34;Thu&amp;#34; &amp;#34;Fri&amp;#34; &amp;#34;Tue&amp;#34; &amp;#34;Wed&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Over rows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;slide&lt;/span&gt;(company, &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt;.x)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [[1]]&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 1 x 3&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   sales index      wday &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;     &amp;lt;chr&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1     2 2019-08-29 Thu  &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [[2]]&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 1 x 3&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   sales index      wday &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;     &amp;lt;chr&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1     4 2019-08-30 Fri  &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [[3]]&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 1 x 3&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   sales index      wday &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;     &amp;lt;chr&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1     3 2019-09-03 Tue  &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [[4]]&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 1 x 3&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   sales index      wday &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;     &amp;lt;chr&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1     5 2019-09-04 Wed&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can also still use the additional arguments to construct sliding windows along your data frame.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;slide&lt;/span&gt;(company, &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt;.x, .before &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [[1]]&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 1 x 3&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   sales index      wday &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;     &amp;lt;chr&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1     2 2019-08-29 Thu  &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [[2]]&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 2 x 3&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   sales index      wday &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;     &amp;lt;chr&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1     2 2019-08-29 Thu  &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2     4 2019-08-30 Fri  &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [[3]]&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 3 x 3&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   sales index      wday &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;     &amp;lt;chr&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1     2 2019-08-29 Thu  &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2     4 2019-08-30 Fri  &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3     3 2019-09-03 Tue  &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [[4]]&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 3 x 3&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   sales index      wday &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;     &amp;lt;chr&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1     4 2019-08-30 Fri  &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2     3 2019-09-03 Tue  &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3     5 2019-09-04 Wed&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;index-sliding&#34;&gt;Index sliding&lt;/h2&gt;
&lt;p&gt;Throughout R&amp;rsquo;s history, a few of the features of &lt;code&gt;slide()&lt;/code&gt; have been available in other packages. You could accomplish some of the same things with &lt;code&gt;zoo::rollapply()&lt;/code&gt;, &lt;code&gt;tsibble::slide()&lt;/code&gt;, and even with my original attempt at this, &lt;code&gt;tibbletime::rollify()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But none of these methods ever solved a problem that is incredibly common in business-oriented data analysis. What happens when you have a date index attached to when the sales happened, and you want to compute a moving average over &lt;em&gt;two days&lt;/em&gt;? &lt;code&gt;slide()&lt;/code&gt; doesn&amp;rsquo;t solve this problem either, because you might have date gaps in your vector that it doesn&amp;rsquo;t know about. To demonstrate this, let&amp;rsquo;s assume that you are interested in computing those two day windows. To visualize them, we&amp;rsquo;ll print out the week day that would be associated with these naive windows if we used &lt;code&gt;slide()&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;wday_vec
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] &amp;#34;Thu&amp;#34; &amp;#34;Fri&amp;#34; &amp;#34;Tue&amp;#34; &amp;#34;Wed&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#00f&#34;&gt;slide&lt;/span&gt;(wday_vec, &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt;.x, .before &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [[1]]&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] &amp;#34;Thu&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [[2]]&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] &amp;#34;Thu&amp;#34; &amp;#34;Fri&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [[3]]&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] &amp;#34;Fri&amp;#34; &amp;#34;Tue&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [[4]]&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] &amp;#34;Tue&amp;#34; &amp;#34;Wed&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice the third window! We started on Tuesday, which means the window should only include &lt;code&gt;[Mon, Tue]&lt;/code&gt;, but Friday is also included here. This happens because &lt;code&gt;slide()&lt;/code&gt; looks back a number of &lt;em&gt;values&lt;/em&gt;, and knows nothing about how to compute this &lt;code&gt;[Mon, Tue]&lt;/code&gt; &lt;em&gt;range&lt;/em&gt; to slide between. This differentiation between values and ranges comes from SQL, and is further explained in a bit more detail by 
&lt;a href=&#34;https://www.vertica.com/docs/9.2.x/HTML/Content/Authoring/SQLReferenceManual/Functions/Analytic/window_frame_clause.htm?origin_team=T02V9CHFH#ROWSversusRANGE&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vertica&amp;rsquo;s window function documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To solve this specific problem of sliding with respect to an index, we&amp;rsquo;ll need a new function, &lt;code&gt;slide_index()&lt;/code&gt;. It&amp;rsquo;s similar to &lt;code&gt;slide()&lt;/code&gt;, and has all of the same suffixed versions, but allows you to pass in a secondary index to slide relative to. Ranges to slide between are computed as &lt;code&gt;.i - .before&lt;/code&gt; and &lt;code&gt;.i + .after&lt;/code&gt;, meaning that you can use more interesting objects for &lt;code&gt;.before&lt;/code&gt;, like &lt;code&gt;lubridate::days()&lt;/code&gt;! It just has to implement &lt;code&gt;-&lt;/code&gt; and &lt;code&gt;+&lt;/code&gt; methods when combined with your index.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;wday_vec
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] &amp;#34;Thu&amp;#34; &amp;#34;Fri&amp;#34; &amp;#34;Tue&amp;#34; &amp;#34;Wed&amp;#34;&lt;/span&gt;
index_vec
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] &amp;#34;2019-08-29&amp;#34; &amp;#34;2019-08-30&amp;#34; &amp;#34;2019-09-03&amp;#34; &amp;#34;2019-09-04&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#00f&#34;&gt;slide_index&lt;/span&gt;(.x &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; wday_vec, .i &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; index_vec, &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt;.x, .before &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;days&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;))
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [[1]]&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] &amp;#34;Thu&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [[2]]&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] &amp;#34;Thu&amp;#34; &amp;#34;Fri&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [[3]]&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] &amp;#34;Tue&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [[4]]&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] &amp;#34;Tue&amp;#34; &amp;#34;Wed&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This correctly buckets Tuesday in its own group, since there is no data point for the Monday before it. We can compare the difference between a two-value vs a two-day moving average like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;company &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;mutate&lt;/span&gt;(
    two_value &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;slide_dbl&lt;/span&gt;(sales, mean, .before &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;),
    two_day &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;slide_index_dbl&lt;/span&gt;(sales, index, mean, .before &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;days&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;)),
  )
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 4 x 5&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   sales index      wday  two_value two_day&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;     &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1     2 2019-08-29 Thu         2         2&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2     4 2019-08-30 Fri         3         3&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3     3 2019-09-03 Tue         3.5       3&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4     5 2019-09-04 Wed         4         4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;period-sliding&#34;&gt;Period sliding&lt;/h2&gt;
&lt;p&gt;While &lt;code&gt;slide()&lt;/code&gt; and &lt;code&gt;slide_index()&lt;/code&gt; are great because they are size-stable, sometimes you&amp;rsquo;ll want to take data that has a daily index, break it into monthly chunks, and return results at the monthly level. This implies returning an output that has a different size from your input. To power these ideas, you can use &lt;code&gt;slide_period()&lt;/code&gt;, which takes an index and a period to chunk by, and then iterates over &lt;code&gt;.x&lt;/code&gt; relative to those period chunks.&lt;/p&gt;
&lt;p&gt;Say we want to take &lt;code&gt;big_company&lt;/code&gt; below, break it into monthly chunks, and compute and return just the monthly totals.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;big_index_vec &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(
  &lt;span style=&#34;color:#00f&#34;&gt;as.Date&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;2019-08-30&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;,
  &lt;span style=&#34;color:#00f&#34;&gt;as.Date&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;2019-11-30&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;
)

big_sales_vec &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;)

big_company &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;tibble&lt;/span&gt;(
  sales &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; big_sales_vec,
  index &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; big_index_vec
)

big_company
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 10 x 2&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    sales index     &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;    &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1     2 2019-08-30&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2     4 2019-08-31&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3     6 2019-09-01&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4     2 2019-09-02&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5     8 2019-09-03&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6    10 2019-11-30&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7     9 2019-12-01&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8     3 2019-12-02&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9     5 2019-12-03&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10     2 2019-12-04&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;slide_period()&lt;/code&gt; allows you to iterate over your data frame in these monthly chunks, applying whatever function you want to each one.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;slide_period&lt;/span&gt;(big_company, big_company&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;index, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;month&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt;.x)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [[1]]&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 2 x 2&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   sales index     &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;    &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1     2 2019-08-30&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2     4 2019-08-31&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [[2]]&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 3 x 2&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   sales index     &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;    &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1     6 2019-09-01&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2     2 2019-09-02&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3     8 2019-09-03&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [[3]]&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 1 x 2&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   sales index     &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;    &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1    10 2019-11-30&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [[4]]&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 4 x 2&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   sales index     &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;    &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1     9 2019-12-01&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2     3 2019-12-02&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3     5 2019-12-03&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4     2 2019-12-04&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I find it easiest to wrap up what you want to do into a function, and then apply that to each slice.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;monthly_summary &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(data) {
  &lt;span style=&#34;color:#00f&#34;&gt;summarise&lt;/span&gt;(data, start &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;min&lt;/span&gt;(index), end &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;max&lt;/span&gt;(index), total_sales &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;sum&lt;/span&gt;(sales))
}

&lt;span style=&#34;color:#00f&#34;&gt;slide_period_dfr&lt;/span&gt;(
  big_company,
  big_company&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;index,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;month&amp;#34;&lt;/span&gt;,
  monthly_summary
)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 4 x 3&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   start      end        total_sales&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;date&amp;gt;     &amp;lt;date&amp;gt;           &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 2019-08-30 2019-08-31           6&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2 2019-09-01 2019-09-03          16&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3 2019-11-30 2019-11-30          10&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4 2019-12-01 2019-12-04          19&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, you might recognize that you can do this with dplyr:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;big_company &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;mutate&lt;/span&gt;(monthly &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;floor_date&lt;/span&gt;(index, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;month&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;group_by&lt;/span&gt;(monthly) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#00f&#34;&gt;summarise&lt;/span&gt;(sales &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;sum&lt;/span&gt;(sales))
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 4 x 2&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   monthly    sales&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;date&amp;gt;     &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 2019-08-01     6&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2 2019-09-01    16&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3 2019-11-01    10&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4 2019-12-01    19&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But what you can&amp;rsquo;t easily do is slide over multiple monthly chunks at once, effectively creating a rolling monthly total, from daily data. With &lt;code&gt;slide_period()&lt;/code&gt;, &lt;code&gt;.before&lt;/code&gt; works at the period level, so you get to control how many monthly periods are included in your sliding window. Notice how the start dates below go back into the previous month (but only if there was data for it).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;slide_period_dfr&lt;/span&gt;(
  big_company,
  big_company&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;index,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;month&amp;#34;&lt;/span&gt;,
  monthly_summary,
  .before &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;
)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 4 x 3&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   start      end        total_sales&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;date&amp;gt;     &amp;lt;date&amp;gt;           &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 2019-08-30 2019-08-31           6&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2 2019-08-30 2019-09-03          22&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3 2019-11-30 2019-11-30          10&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4 2019-11-30 2019-12-04          29&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;acknowledgements&#34;&gt;Acknowledgements&lt;/h2&gt;
&lt;p&gt;A big thanks to some of the early adopters of slider!&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/AlanFeder&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@AlanFeder&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/AlunHewinson&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@AlunHewinson&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/echasnovski&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@echasnovski&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/mik3y64&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@mik3y64&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/perlatex&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@perlatex&lt;/a&gt;, and 
&lt;a href=&#34;https://github.com/RobertMyles&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@RobertMyles&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>vroom 1.1.0</title>
      <link>/blog/2020/01/vroom-1-1-0/</link>
      <pubDate>Wed, 15 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/blog/2020/01/vroom-1-1-0/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m excited to announce that 
&lt;a href=&#34;http://vroom.r-lib.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;vroom 1.1.0&lt;/a&gt; is now
available on CRAN!&lt;/p&gt;
&lt;p&gt;vroom reads rectangular data, such as comma separated (csv), tab separated (tsv) or fixed width files (fwf) into R.
It performs similar roles to functions like 
&lt;a href=&#34;http://readr.r-lib.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;readr::read_csv()&lt;/code&gt;&lt;/a&gt;, 
&lt;a href=&#34;http://r-datatable.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;data.table::fread()&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;read.csv()&lt;/code&gt;.
But for many datasets &lt;code&gt;vroom::vroom()&lt;/code&gt; can read them much, much faster (hence the name).
Get the latest version with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;install.packages&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;vroom&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And attach the package by running&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(vroom)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Improvements in this release include: a hex logo, support for big integer data, improved delimiter guessing, including delimiters in specifications, and streamlined reading from standard input.&lt;/p&gt;
&lt;p&gt;See the 
&lt;a href=&#34;https://vroom.r-lib.org/news/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;change log&lt;/a&gt; for a full list of changes and bug fixes in this version.&lt;/p&gt;
&lt;h2 id=&#34;hex-logo&#34;&gt;Hex logo&lt;/h2&gt;
&lt;p&gt;Thanks to 
&lt;a href=&#34;https://github.com/allisonhorst/stats-illustrations&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Allison Horst&lt;/a&gt; we now have an awesome hex logo for vroom!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;logo.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;big-integer-support&#34;&gt;Big integer support&lt;/h2&gt;
&lt;p&gt;R&amp;rsquo;s standard integers are stored in 32 bits of binary data, which means that the largest value they can store is 2,147,483,647 (&lt;code&gt;2^31 - 1&lt;/code&gt;).
R implicitly converts integers for most operations with doubles to 64-bit floating point values, which is why you may not have noticed this limitation before.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;options&lt;/span&gt;(digits &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt;)
x &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2147483647L&lt;/span&gt;
&lt;span style=&#34;color:#00f&#34;&gt;str&lt;/span&gt;(x)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  int 2147483647&lt;/span&gt;
&lt;span style=&#34;color:#00f&#34;&gt;str&lt;/span&gt;(x &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1L&lt;/span&gt;)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Warning in x + 1L: NAs produced by integer overflow&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  int NA&lt;/span&gt;
&lt;span style=&#34;color:#00f&#34;&gt;str&lt;/span&gt;(x &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  num 2.15e+09&lt;/span&gt;
x &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 2147483648&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, even 64-bit floating point values can only store consecutive integers up to 9,007,199,254,740,992 (&lt;code&gt;2^53&lt;/code&gt;) without losing precision.
You can observe this because if you try adding 1 to this number you will get the same number.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;y &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;9007199254740992&lt;/span&gt;
z &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; y &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;
z
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 9007199254740992&lt;/span&gt;
y &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; z
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] TRUE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To store consecutive integers bigger than this you need to use a 64-bit integer type.
R does not have native support for 64-bit integers, however the 
&lt;a href=&#34;https://cran.r-project.org/package=bit64&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;bit64&lt;/a&gt; package provides support for them.
Because these integers are so large, they rarely occur in real world data, however they can often be obtained from generated data, such as database identifiers.&lt;/p&gt;
&lt;p&gt;vroom 1.1.0 now supports reading these big integers into the &lt;code&gt;integer64&lt;/code&gt; type provided by bit64 with a new &lt;code&gt;col_big_integer()&lt;/code&gt; column type (shortcut &amp;lsquo;I&amp;rsquo;).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;x &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;vroom&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;id\n9007199254740993\n&amp;#34;&lt;/span&gt;, col_type &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;I&amp;#34;&lt;/span&gt;, delim &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;)
x
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 1 x 1&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   id              &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;int64&amp;gt;         &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 9007199254740993&lt;/span&gt;

x&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;id &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; integer64&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 9007199254740994&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;improved-delimiter-guessing&#34;&gt;Improved delimiter guessing&lt;/h2&gt;
&lt;p&gt;The code to guess delimiters has been rewritten, which should make it more robust to most inputs.
Previous versions of vroom would fall back to using a newline delimiter if a delimiter could not be guessed.
vroom 1.1.0 instead throws an error.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;vroom&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;x\n1\n&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Error: Could not guess the delimiter.&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Use `vroom(delim =)` to specify one explicitly.&lt;/span&gt;
&lt;span style=&#34;color:#00f&#34;&gt;vroom&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;x\n1\n&amp;#34;&lt;/span&gt;, delim &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Rows: 1&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Columns: 1&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Delimiter: &amp;#34;,&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; dbl [1]: x&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Use `spec()` to retrieve the guessed column specification&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Pass a specification to the `col_types` argument to quiet this message&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 1 x 1&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;       x&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1     1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;delimiters-in-the-specification&#34;&gt;Delimiters in the specification&lt;/h2&gt;
&lt;p&gt;vroom now includes the delimiter in the specification object, which means you no longer have to separately provide the delimiter if you are using an existing specification.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# read a csv file, the delimiter is provided as &amp;#39;,&amp;#39;&lt;/span&gt;
x &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;vroom&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;vroom_example&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;mtcars.csv&amp;#34;&lt;/span&gt;), delim &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Rows: 32&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Columns: 12&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Delimiter: &amp;#34;,&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; chr [ 1]: model&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; dbl [11]: mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Use `spec()` to retrieve the guessed column specification&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Pass a specification to the `col_types` argument to quiet this message&lt;/span&gt;
mtcars_spec &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;spec&lt;/span&gt;(x)

&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# If the file is read again with the spec, no need to provide the delimiter&lt;/span&gt;
y &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;vroom&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;vroom_example&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;mtcars.csv&amp;#34;&lt;/span&gt;), col_types &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; mtcars_spec)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;reading-from-standard-input&#34;&gt;Reading from standard input&lt;/h2&gt;
&lt;p&gt;vroom makes it straightforward to read from the C standard input, like you would do when calling R from the terminal command line.
Simply use &lt;code&gt;stdin()&lt;/code&gt; as your input. Let&amp;rsquo;s say you want to take the first few lines the mtcars file and find the average horsepower.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;head mtcars.tsv | Rscript -e &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;hp &amp;lt;- vroom::vroom(stdin(), col_types = list())$hp; mean(hp)&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 122.7778&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;acknowledgements&#34;&gt;Acknowledgements&lt;/h2&gt;
&lt;p&gt;This release also contains a number of bug fixes and improvements which should make it more robust than previous releases. See the 
&lt;a href=&#34;https://vroom.r-lib.org/news/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;change log&lt;/a&gt; for full details.&lt;/p&gt;
&lt;p&gt;A big thanks to all contributors of code, issues and documentation to this release, including many who helped out at the tidyverse developer day in Toulouse, France!&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/2005m&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@2005m&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/atomman&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@atomman&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/batpigandme&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@batpigandme&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/blairj09&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@blairj09&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/Chris-M-P&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@Chris-M-P&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/chsafouane&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@chsafouane&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/CriscelyLP&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@CriscelyLP&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/DyfanJones&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@DyfanJones&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/ecoquant&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@ecoquant&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/edzer&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@edzer&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/ericbrownaustin&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@ericbrownaustin&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/estroger34&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@estroger34&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/frm1789&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@frm1789&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/georgevbsantiago&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@georgevbsantiago&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/guiastrennec&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@guiastrennec&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/hadley&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@hadley&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/HenrikBengtsson&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@HenrikBengtsson&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/henry090&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@henry090&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/jaapwalhout&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@jaapwalhout&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/jimhester&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@jimhester&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/jonaszierer&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@jonaszierer&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/kiernann&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@kiernann&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/martindut&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@martindut&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/meta00&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@meta00&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/mgirlich&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@mgirlich&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/mllg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@mllg&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/osiris08&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@osiris08&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/Plebejer&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@Plebejer&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/R3myG&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@R3myG&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/randomgambit&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@randomgambit&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/sanromd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@sanromd&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/Shians&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@Shians&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/stephen-hayne&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@stephen-hayne&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/vjcitn&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@vjcitn&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/wlattner&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@wlattner&lt;/a&gt;, and 
&lt;a href=&#34;https://github.com/xiaodaigh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@xiaodaigh&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>purrr 0.3.0</title>
      <link>/blog/2019/02/purrr-0-3-0/</link>
      <pubDate>Wed, 06 Feb 2019 00:00:00 +0000</pubDate>
      <guid>/blog/2019/02/purrr-0-3-0/</guid>
      <description>&lt;p&gt;We&amp;rsquo;re excited to announce the release of 
&lt;a href=&#34;https://purrr.tidyverse.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;purrr&lt;/a&gt; 0.3.0! purrr enhances R’s functional programming toolkit by providing a complete and consistent set of tools for working with functions and vectors.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Install the latest version with:&lt;/span&gt;
&lt;span style=&#34;color:#00f&#34;&gt;install.packages&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;purrr&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Start working with purrr:&lt;/span&gt;
&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(purrr)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this release, &lt;code&gt;pluck()&lt;/code&gt; gets a few new variants:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pluck&amp;lt;-&lt;/code&gt;, &lt;code&gt;assign_in()&lt;/code&gt; and &lt;code&gt;modify_in()&lt;/code&gt; allow deep modifications of nested structures.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;chuck()&lt;/code&gt; is a stricter variant of &lt;code&gt;pluck()&lt;/code&gt; that consistently fails instead of returning &lt;code&gt;NULL&lt;/code&gt; when the structure does not have the expected shape.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A new set of tools helps limiting the rate at which a function is called:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;slowly()&lt;/code&gt; forces a function to sleep between each invokation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;insistently()&lt;/code&gt; automatically invokes a function again on error until it succeeds, and sleeps between invokations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;rate_delay()&lt;/code&gt; and &lt;code&gt;rate_backoff()&lt;/code&gt; helpers control the invokation rate of &lt;code&gt;slowly()&lt;/code&gt; and &lt;code&gt;insistently()&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The reduce and map functions gain a few improvements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;map_if()&lt;/code&gt; accepts an optional function with the &lt;code&gt;.else&lt;/code&gt; parameter. This function is applied on elements for which the predicate is &lt;code&gt;FALSE&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;map_at()&lt;/code&gt; now accepts &lt;code&gt;vars()&lt;/code&gt; selections. This lets you use selection helpers like &lt;code&gt;dplyr::starts_with()&lt;/code&gt; to determine the elements of a list which should be mapped.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;reduce()&lt;/code&gt; now supports early termination of a computation. Just return a value wrapped in a &lt;code&gt;done()&lt;/code&gt; to signal to &lt;code&gt;reduce()&lt;/code&gt; that you&amp;rsquo;re done.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Besides these new functions and tools, purrr 0.3.0 is mostly a polishing release. We have improved the consistency of behaviour:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;modify()&lt;/code&gt; is now a wrapper around &lt;code&gt;[[&amp;lt;-&lt;/code&gt; instead of &lt;code&gt;[&amp;lt;-&lt;/code&gt;. This makes it compatible with a larger variety of S3 vector classes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Predicate functions (such that you would pass to &lt;code&gt;map_if()&lt;/code&gt;) now must return a single &lt;code&gt;TRUE&lt;/code&gt; or &lt;code&gt;FALSE&lt;/code&gt;. Missing values and integers are no longer valid predicate outputs.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, we improved the consistency of the interface:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The direction of iteration/application is now consistently specified with a &lt;code&gt;.dir&lt;/code&gt; argument.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Many missing functions were added to fill the gaps: &lt;code&gt;accumulate2()&lt;/code&gt;, &lt;code&gt;imodify()&lt;/code&gt;, &lt;code&gt;map_depth()&lt;/code&gt;, &amp;hellip;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;partial()&lt;/code&gt; has a much improved and more flexible interface.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Find a detailed account of the changes in the 
&lt;a href=&#34;https://github.com/tidyverse/purrr/blob/master/NEWS.md#purrr-030&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NEWS&lt;/a&gt; file.&lt;/p&gt;
&lt;h2 id=&#34;new-pluck-variants&#34;&gt;New pluck variants&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;pluck()&lt;/code&gt; implements a generalised form of &lt;code&gt;[[&lt;/code&gt; that allow you to index deeply and flexibly into data structures. For instance, &lt;code&gt;pluck(x, &amp;quot;foo&amp;quot;, 2)&lt;/code&gt; is equivalent to &lt;code&gt;x[[&amp;quot;foo&amp;quot;]][[2]]&lt;/code&gt;. You can also supply a default value in case the element does not exist. For instance, &lt;code&gt;pluck(x, &amp;quot;foo&amp;quot;, 2, .default = NA)&lt;/code&gt; is equivalent to &lt;code&gt;x[[&amp;quot;foo&amp;quot;]][[2]]&lt;/code&gt;, returning an &lt;code&gt;NA&lt;/code&gt; if that element doesn&amp;rsquo;t exist. purrr 0.3.0 introduces variants of &lt;code&gt;pluck()&lt;/code&gt; to make it easier to work with deep data structures.&lt;/p&gt;
&lt;h3 id=&#34;pluck-assignment&#34;&gt;Pluck assignment&lt;/h3&gt;
&lt;p&gt;This release introduces the new functions &lt;code&gt;pluck&amp;lt;-&lt;/code&gt;, &lt;code&gt;assign_in()&lt;/code&gt; and &lt;code&gt;modify_in()&lt;/code&gt; as assignment variants of &lt;code&gt;pluck()&lt;/code&gt;. To illustrate deep assignment, let&amp;rsquo;s create a nested data structure:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;x &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;list&lt;/span&gt;(foo &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;list&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;), bar &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;list&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;))
&lt;span style=&#34;color:#00f&#34;&gt;str&lt;/span&gt;(x)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; List of 2&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  $ foo:List of 2&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   ..$ : num 1&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   ..$ : num 2&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  $ bar:List of 2&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   ..$ : num 3&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   ..$ : num 4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This sort of repeated structure is the kind of data where &lt;code&gt;pluck()&lt;/code&gt; shines:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;pluck&lt;/span&gt;(x, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 2&lt;/span&gt;

&lt;span style=&#34;color:#00f&#34;&gt;pluck&lt;/span&gt;(x, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can now use the same syntax to modify the data:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;pluck&lt;/span&gt;(x, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;100&lt;/span&gt;
&lt;span style=&#34;color:#00f&#34;&gt;str&lt;/span&gt;(x)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; List of 2&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  $ foo:List of 2&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   ..$ : num 1&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   ..$ : num 100&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  $ bar:List of 2&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   ..$ : num 3&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   ..$ : num 4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;pluck&amp;lt;-&lt;/code&gt; also has a functional form that does not modify objects in your environment, but instead returns a modified copy:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;out &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;assign_in&lt;/span&gt;(x, &lt;span style=&#34;color:#00f&#34;&gt;list&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;), &lt;span style=&#34;color:#666&#34;&gt;2000&lt;/span&gt;)

&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# The object is still the same as before&lt;/span&gt;
&lt;span style=&#34;color:#00f&#34;&gt;str&lt;/span&gt;(x)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; List of 2&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  $ foo:List of 2&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   ..$ : num 1&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   ..$ : num 100&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  $ bar:List of 2&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   ..$ : num 3&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   ..$ : num 4&lt;/span&gt;

&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# The modified data is in `out`&lt;/span&gt;
&lt;span style=&#34;color:#00f&#34;&gt;str&lt;/span&gt;(out)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; List of 2&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  $ foo:List of 2&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   ..$ : num 1&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   ..$ : num 2000&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  $ bar:List of 2&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   ..$ : num 3&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   ..$ : num 4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, &lt;code&gt;modify_in()&lt;/code&gt; is a variant of &lt;code&gt;modify()&lt;/code&gt; that only changes the pluck location with the result of applying a function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;out &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;modify_in&lt;/span&gt;(x, &lt;span style=&#34;color:#00f&#34;&gt;list&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;), as.character)
&lt;span style=&#34;color:#00f&#34;&gt;str&lt;/span&gt;(out)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; List of 2&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  $ foo:List of 2&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   ..$ : num 1&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   ..$ : chr &amp;#34;100&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  $ bar:List of 2&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   ..$ : num 3&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   ..$ : num 4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;stricter-pluck&#34;&gt;Stricter pluck()&lt;/h3&gt;
&lt;p&gt;Thanks to Daniel Barnett (@daniel-barnett on Github), &lt;code&gt;pluck()&lt;/code&gt; now has a stricter cousin &lt;code&gt;chuck()&lt;/code&gt;. Whereas &lt;code&gt;pluck()&lt;/code&gt; is very permissive regarding non-existing locations and returns &lt;code&gt;NULL&lt;/code&gt; in these cases, and &lt;code&gt;[[&lt;/code&gt; inconsistently returns &lt;code&gt;NULL&lt;/code&gt;, &lt;code&gt;NA&lt;/code&gt;, or throws an error, &lt;code&gt;chuck()&lt;/code&gt; fails consistently with informative messages (i.e., it &amp;ldquo;chucks&amp;rdquo; an error message):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;pluck&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;list&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;), &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; NULL&lt;/span&gt;

&lt;span style=&#34;color:#00f&#34;&gt;chuck&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;list&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;), &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Error: Index 1 is attempting to pluck from an unnamed vector using a string name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;rates&#34;&gt;Rates&lt;/h2&gt;
&lt;p&gt;Thanks to Richie Cotton (@richierocks) and Ian Lyttle (@ijlyttle), purrr gains a function operator to make a function call itself repeatedly when an error occurs.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;counter &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;

f &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;...&lt;/span&gt;) {
  &lt;span style=&#34;color:#00f&#34;&gt;if &lt;/span&gt;(counter &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;) {
    counter &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&amp;lt;-&lt;/span&gt; counter &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#00f&#34;&gt;stop&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;tilt!&amp;#34;&lt;/span&gt;)
  }
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;result&amp;#34;&lt;/span&gt;
}

&lt;span style=&#34;color:#00f&#34;&gt;f&lt;/span&gt;()
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Error in f(): tilt!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If the function is wrapped with &lt;code&gt;insistently()&lt;/code&gt;, it will try a few times before giving up:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Reset counter&lt;/span&gt;
counter &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;

f2 &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;insistently&lt;/span&gt;(f)
&lt;span style=&#34;color:#00f&#34;&gt;f2&lt;/span&gt;()
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] &amp;#34;result&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Another rate limiting function is &lt;code&gt;slowly()&lt;/code&gt;. While &lt;code&gt;insistently()&lt;/code&gt; loops by itself, &lt;code&gt;slowly()&lt;/code&gt; is designed to be used in your own loops, for instance in a map iteration:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;f &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;...&lt;/span&gt;) &lt;span style=&#34;color:#00f&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;Sys.time&lt;/span&gt;())

&lt;span style=&#34;color:#00f&#34;&gt;walk&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;, f)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] &amp;#34;2019-03-06 12:50:03 PST&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] &amp;#34;2019-03-06 12:50:03 PST&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] &amp;#34;2019-03-06 12:50:03 PST&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#00f&#34;&gt;walk&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#00f&#34;&gt;slowly&lt;/span&gt;(f))
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] &amp;#34;2019-03-06 12:50:03 PST&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] &amp;#34;2019-03-06 12:50:04 PST&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] &amp;#34;2019-03-06 12:50:05 PST&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;slowly()&lt;/code&gt; uses a constant rate by default while &lt;code&gt;insistently()&lt;/code&gt; uses a backoff rate. The rate limiting can be configured with optional jitter via &lt;code&gt;rate_backoff()&lt;/code&gt; and &lt;code&gt;rate_delay()&lt;/code&gt;, which implement exponential backoff rate and constant rate respectively.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;walk&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#00f&#34;&gt;slowly&lt;/span&gt;(f, &lt;span style=&#34;color:#00f&#34;&gt;rate_backoff&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;, max_times &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;Inf&lt;/span&gt;)))
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] &amp;#34;2019-03-06 12:50:05 PST&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] &amp;#34;2019-03-06 12:50:07 PST&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] &amp;#34;2019-03-06 12:50:10 PST&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;map-and-reduce-improvements&#34;&gt;Map and reduce improvements&lt;/h2&gt;
&lt;h3 id=&#34;map_if-or-else&#34;&gt;&lt;code&gt;map_if()&lt;/code&gt;&amp;hellip; or else?&lt;/h3&gt;
&lt;p&gt;If you like using &lt;code&gt;map_if()&lt;/code&gt;, perhaps you&amp;rsquo;ll find the new &lt;code&gt;.else&lt;/code&gt; argument useful. &lt;code&gt;.else&lt;/code&gt; is a function applied to elements for which the predicate is &lt;code&gt;FALSE&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;map_if&lt;/span&gt;(iris, is.numeric, mean, .else &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; nlevels)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $Sepal.Length&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 5.843333&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $Sepal.Width&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 3.057333&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $Petal.Length&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 3.758&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $Petal.Width&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 1.199333&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $Species&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;new-map_at-features&#34;&gt;New &lt;code&gt;map_at()&lt;/code&gt; features&lt;/h3&gt;
&lt;p&gt;Colin Fay (@ColinFay) has added support for tidyselect expressions to &lt;code&gt;map_at()&lt;/code&gt; and other &lt;code&gt;_at&lt;/code&gt; mappers. This brings the interface of these functions closer to scoped functions from the dplyr package, such as &lt;code&gt;dplyr::mutate_at()&lt;/code&gt;. Note that &lt;code&gt;vars()&lt;/code&gt; is currently not reexported from purrr, so you need to use &lt;code&gt;dplyr::vars()&lt;/code&gt; or &lt;code&gt;ggplot2::vars()&lt;/code&gt; for the time being.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;suppressMessages&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;dplyr&amp;#34;&lt;/span&gt;))

x &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;list&lt;/span&gt;(
  foo &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;,
  bar &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;,
  baz &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;11&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;15&lt;/span&gt;
)

&lt;span style=&#34;color:#00f&#34;&gt;map_at&lt;/span&gt;(x, &lt;span style=&#34;color:#00f&#34;&gt;vars&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;starts_with&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;)), mean)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $foo&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 1 2 3 4 5&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $bar&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 8&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $baz&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 13&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;map_at()&lt;/code&gt; now also supports negative selections:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;map_at&lt;/span&gt;(x, &lt;span style=&#34;color:#666&#34;&gt;-2&lt;/span&gt;, `*`, &lt;span style=&#34;color:#666&#34;&gt;1000&lt;/span&gt;)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $foo&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 1000 2000 3000 4000 5000&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $bar&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1]  6  7  8  9 10&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $baz&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 11000 12000 13000 14000 15000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;early-termination-of-reduction&#34;&gt;Early termination of reduction&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;reduce()&lt;/code&gt; is an operation that combines the elements of a vector into a single value by calling a binary function repeatedly with the result so far and the next input of a vector. &lt;code&gt;reduce()&lt;/code&gt; and its variant &lt;code&gt;accumulate()&lt;/code&gt; now support early termination of the reduction. To halt the computation, just return the last value wrapped in a &lt;code&gt;done()&lt;/code&gt; box:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# This computes the total sum of the input vector&lt;/span&gt;
&lt;span style=&#34;color:#00f&#34;&gt;reduce&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; .x &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; .y)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 5050&lt;/span&gt;

&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# This stops as soon as the sum is greater than 50&lt;/span&gt;
&lt;span style=&#34;color:#00f&#34;&gt;reduce&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;if &lt;/span&gt;(.x &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;50&lt;/span&gt;) &lt;span style=&#34;color:#00f&#34;&gt;done&lt;/span&gt;(.x) else .x &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; .y)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 55&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This feature takes inspiration from the 
&lt;a href=&#34;https://clojuredocs.org/clojure.core/reduced&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Clojure&lt;/a&gt; language.&lt;/p&gt;
&lt;h2 id=&#34;consistency&#34;&gt;Consistency&lt;/h2&gt;
&lt;p&gt;In this polishing release, a lot of effort went towards consistency of behaviour and of the interface.&lt;/p&gt;
&lt;h3 id=&#34;behaviour&#34;&gt;Behaviour&lt;/h3&gt;
&lt;h4 id=&#34;better-support-for-s3-vectors&#34;&gt;Better support for S3 vectors&lt;/h4&gt;
&lt;p&gt;We are working hard on improving support for S3 vectors in the tidyverse. As of this release, &lt;code&gt;modify()&lt;/code&gt; is now a wrapper around &lt;code&gt;[[&amp;lt;-&lt;/code&gt; instead of &lt;code&gt;[&amp;lt;-&lt;/code&gt;. This should make it directly compatible with a larger set of vector classes. Thanks to the work of Mikko Marttila (@mikmart), &lt;code&gt;pmap()&lt;/code&gt; and &lt;code&gt;pwalk()&lt;/code&gt; also do a better job of preserving S3 classes. Finally, &lt;code&gt;pluck()&lt;/code&gt; now properly calls the &lt;code&gt;[[&lt;/code&gt; methods of S3 objects.&lt;/p&gt;
&lt;p&gt;In the next version of purrr, we plan to use the in-development vctrs package to provide more principled and predictable vector operations. This should help us preserve the class and properties of S3 vectors like factors, dates, or your custom classes.&lt;/p&gt;
&lt;h4 id=&#34;stricter-predicate-checking&#34;&gt;Stricter predicate checking&lt;/h4&gt;
&lt;p&gt;purrr now checks the results of your predicate functions, which must now consistently return &lt;code&gt;TRUE&lt;/code&gt; or &lt;code&gt;FALSE&lt;/code&gt;. We no longer offer support for &lt;code&gt;NA&lt;/code&gt; or for boolish numeric values (R normally interprets 0 as &lt;code&gt;FALSE&lt;/code&gt; and all other values as &lt;code&gt;TRUE&lt;/code&gt;). The purpose of this change is to detect errors earlier with a more relevant error message.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;keep&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;NA&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;), &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; . &lt;span style=&#34;color:#666&#34;&gt;%%&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Error: Predicate functions must return a single `TRUE` or `FALSE`, not a missing value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;interface&#34;&gt;Interface&lt;/h3&gt;
&lt;h4 id=&#34;direction-of-application&#34;&gt;Direction of application&lt;/h4&gt;
&lt;p&gt;The direction of application is now specified the same way across purrr functions. &lt;code&gt;reduce()&lt;/code&gt;, &lt;code&gt;compose()&lt;/code&gt; and &lt;code&gt;detect()&lt;/code&gt; now have a &lt;code&gt;.dir&lt;/code&gt; parameter that can take the value &lt;code&gt;&amp;quot;forward&amp;quot;&lt;/code&gt; or &lt;code&gt;&amp;quot;backward&amp;quot;&lt;/code&gt;. This terminology should be less ambiguous than &amp;ldquo;left&amp;rdquo; and &amp;ldquo;right&amp;rdquo;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;reduce&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;, `-`, .dir &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;backward&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#00f&#34;&gt;compose&lt;/span&gt;(foo, bar, .dir &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;forward&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#00f&#34;&gt;detect&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; . &lt;span style=&#34;color:#666&#34;&gt;%%&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, .dir &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;backward&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that the backward version of &lt;code&gt;reduce()&lt;/code&gt; (called right-reduce in the literature) applies the reduced function in a slightly different way than &lt;code&gt;reduce_right()&lt;/code&gt;. The new algorithm is more consistent with how this operation is usually defined in other languages.&lt;/p&gt;
&lt;p&gt;Following the introduction of the &lt;code&gt;.dir&lt;/code&gt; parameters, the &lt;code&gt;_right&lt;/code&gt; variants such as &lt;code&gt;reduce_right()&lt;/code&gt; have been soft-deprecated, as well as the &lt;code&gt;.right&lt;/code&gt; parameter of &lt;code&gt;detect()&lt;/code&gt; and &lt;code&gt;detect_index()&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;partial&#34;&gt;partial()&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;partial()&lt;/code&gt; has been rewritten to be a simple wrapper around &lt;code&gt;call_modify()&lt;/code&gt; and &lt;code&gt;eval_tidy()&lt;/code&gt; from the rlang package. Consequently, the &lt;code&gt;.env&lt;/code&gt;, &lt;code&gt;.lazy&lt;/code&gt; and &lt;code&gt;.first&lt;/code&gt; arguments are soft-deprecated and replaced by a flexible syntax.&lt;/p&gt;
&lt;p&gt;To control the timing of evaluation, unquote the partialised arguments that should be evaluated only once when the function is created. The non-unquoted arguments are evaluated at each invokation of the function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;my_list &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;partial&lt;/span&gt;(list, lazy &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;rnorm&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;), eager &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;!!&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;rnorm&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;))

&lt;span style=&#34;color:#00f&#34;&gt;my_list&lt;/span&gt;()
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $lazy&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1]  0.2945451  0.3897943 -1.2080762&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $eager&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] -0.1842525 -1.3713305 -0.5991677&lt;/span&gt;

&lt;span style=&#34;color:#00f&#34;&gt;my_list&lt;/span&gt;()
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $lazy&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] -0.3636760 -1.6266727 -0.2564784&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $eager&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] -0.1842525 -1.3713305 -0.5991677&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can also control the position of the future arguments by passing an empty &lt;code&gt;... = &lt;/code&gt; parameter. This syntax is powered by &lt;code&gt;rlang::call_modify()&lt;/code&gt; and allows you to add or move dots in a quoted function call. In the case of &lt;code&gt;partial()&lt;/code&gt;, the dots represent the future arguments. We use this syntax in the following snippet to position the future arguments right between two partialised arguments:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;my_list &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;partial&lt;/span&gt;(list, &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; , &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;)

&lt;span style=&#34;color:#00f&#34;&gt;my_list&lt;/span&gt;()
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [[1]]&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 1&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [[2]]&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 2&lt;/span&gt;

&lt;span style=&#34;color:#00f&#34;&gt;my_list&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [[1]]&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 1&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [[2]]&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] &amp;#34;foo&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [[3]]&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;exec-replaces-invoke&#34;&gt;&lt;code&gt;exec()&lt;/code&gt; replaces &lt;code&gt;invoke()&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;We are retiring &lt;code&gt;invoke()&lt;/code&gt; and &lt;code&gt;invoke_map()&lt;/code&gt; in favour of &lt;code&gt;exec()&lt;/code&gt;. Retirement means that we&amp;rsquo;ll keep these functions indefinitely in the package, but we won&amp;rsquo;t add features or recommend using them.&lt;/p&gt;
&lt;p&gt;We are now favouring &lt;code&gt;exec()&lt;/code&gt;, which uses the tidy dots syntax for passing lists of arguments:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Before:&lt;/span&gt;
&lt;span style=&#34;color:#00f&#34;&gt;invoke&lt;/span&gt;(mean, &lt;span style=&#34;color:#00f&#34;&gt;list&lt;/span&gt;(na.rm &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;), x &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 5.5&lt;/span&gt;

&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# After&lt;/span&gt;
&lt;span style=&#34;color:#00f&#34;&gt;exec&lt;/span&gt;(mean, &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;!!!&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;list&lt;/span&gt;(na.rm &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;))
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 5.5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;filling-the-missing-parts&#34;&gt;Filling the missing parts&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;purrr 0.3.0 introduces &lt;code&gt;accumulate2()&lt;/code&gt;, &lt;code&gt;modify2()&lt;/code&gt; and &lt;code&gt;imodify()&lt;/code&gt; variants.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;By popular request, &lt;code&gt;at_depth()&lt;/code&gt; is back as &lt;code&gt;map_depth()&lt;/code&gt;. Unlike &lt;code&gt;modify_depth()&lt;/code&gt; which preserves the class structure of the input tree, this variant only returns trees made of lists of lists (up to the given depth), coercing vectors if needed.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;thanks&#34;&gt;Thanks!&lt;/h2&gt;
&lt;p&gt;Thanks to all the contributors for this release!&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/ArtemSokolov&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;＠ArtemSokolov&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/batpigandme&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;＠batpigandme&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/bbrewington&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;＠bbrewington&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/billdenney&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;＠billdenney&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/cderv&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;＠cderv&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/cfhammill&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;＠cfhammill&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/ColinFay&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;＠ColinFay&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/dan-reznik&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;＠dan-reznik&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/daniel-barnett&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;＠daniel-barnett&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/danilinares&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;＠danilinares&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/drtjc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;＠drtjc&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/egnha&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;＠egnha&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/Eluvias&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;＠Eluvias&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/flying-sheep&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;＠flying-sheep&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/gergness&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;＠gergness&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/gvwilson&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;＠gvwilson&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/hadley&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;＠hadley&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/hammer&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;＠hammer&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/ijlyttle&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;＠ijlyttle&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/ilarischeinin&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;＠ilarischeinin&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/IndrajeetPatil&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;＠IndrajeetPatil&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/ISPritchin&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;＠ISPritchin&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/jameslairdsmith&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;＠jameslairdsmith&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/jameslamb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;＠jameslamb&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/jrnold&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;＠jrnold&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/kcf-jackson&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;＠kcf-jackson&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/leungi&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;＠leungi&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/lionel-&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;＠lionel-&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/loladze&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;＠loladze&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/maxheld83&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;＠maxheld83&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/mikmart&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;＠mikmart&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/MilesMcBain&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;＠MilesMcBain&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/moodymudskipper&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;＠moodymudskipper&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/mrstlee&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;＠mrstlee&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/namelessjon&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;＠namelessjon&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/r-cheologist&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;＠r-cheologist&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/randomgambit&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;＠randomgambit&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/rmflight&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;＠rmflight&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/roumail&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;＠roumail&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/Ryo-N7&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;＠Ryo-N7&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/serina-robinson&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;＠serina-robinson&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/skaltman&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;＠skaltman&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/suraggupta&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;＠suraggupta&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/thays42&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;＠thays42&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/tyluRp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;＠tyluRp&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/tzakharko&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;＠tzakharko&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/VincentGuyader&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;＠VincentGuyader&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/wlandau&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;＠wlandau&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/wmayner&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;＠wmayner&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/yanxianl&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;＠yanxianl&lt;/a&gt;, 
&lt;a href=&#34;https://github.com/yutannihilation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;＠yutannihilation&lt;/a&gt;, and 
&lt;a href=&#34;https://github.com/yysh12&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;＠yysh12&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
